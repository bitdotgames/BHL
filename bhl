#!/usr/bin/env php
<?php
$BHL_ROOT = dirname(__FILE__).'/';
require_once($BHL_ROOT . '/deps/taskman.inc.php');
require_once($BHL_ROOT . '/deps/helpers.inc.php');

taskman_run($argv);

/**
 * @deps genmeta
 */
function task_build_front_dll()
{
  global $BHL_ROOT;

  mcs_build(array(
    "$BHL_ROOT/deps/msgpack/Compiler/*.cs",
    "$BHL_ROOT/deps/msgpack/*.cs",
    "$BHL_ROOT/deps/metagen/metagen.cs",
    "$BHL_ROOT/deps/FlatBuffers/*.cs",
    "$BHL_ROOT/src/g/*.cs",
    "$BHL_ROOT/src/*.cs",
    "$BHL_ROOT/Antlr4.Runtime.Standard.dll", 
  ),
  "$BHL_ROOT/bhl_front.dll",
  "-define:BHL_FRONT -warnaserror -warnaserror-:3021 -nowarn:3021 -debug -target:library"
  );
}

function task_build_back_dll(array $args)
{
  global $BHL_ROOT;

  $mcs_bin = isset($args[0]) ? $args[0] : "/Applications/Unity/Unity.app/Contents/Frameworks/Mono/bin/gmcs"; 
  $dll_file = isset($args[1]) ? $args[1] : "$BHL_ROOT/bhl_back.dll";
  $extra_args = isset($args[2]) ? $args[2] : '-debug';

  mcs_build(array(
    "$BHL_ROOT/deps/msgpack/Compiler/*.cs",
    "$BHL_ROOT/deps/msgpack/*.cs",
    "$BHL_ROOT/deps/metagen/metagen.cs",
    "$BHL_ROOT/deps/FlatBuffers/*.cs",
    "$BHL_ROOT/src/fbhl.cs", 
    "$BHL_ROOT/src/autogen.cs", 
    "$BHL_ROOT/src/ast.cs", 
    "$BHL_ROOT/src/symbol.cs", 
    "$BHL_ROOT/src/scope.cs", 
    "$BHL_ROOT/src/backend.cs", 
    "$BHL_ROOT/src/loader.cs", 
    "$BHL_ROOT/src/storage.cs", 
    "$BHL_ROOT/src/nodes.cs", 
    "$BHL_ROOT/src/util.cs",
    "$BHL_ROOT/src/lz4.cs",
   ), 
  $dll_file,
  "$extra_args -target:library",
  $mcs_bin
  );
}

function task_clean()
{
  global $BHL_ROOT;

  ensure_rm("$BHL_ROOT/bhl_front.dll");
  ensure_rm("$BHL_ROOT/bhl_front.dll.mdb");
  ensure_rm("$BHL_ROOT/bhl.exe");
  ensure_rm("$BHL_ROOT/bhl.exe.mdb");
  ensure_rm("$BHL_ROOT/text.exe");
  ensure_rm("$BHL_ROOT/text.exe.mdb");
}

/**
 * @deps genmeta,geng
 */
function task_regen()
{}

function task_geng()
{   
  global $BHL_ROOT;

  ensure_mkdir("$BHL_ROOT/tmp");

  ensure_copy("$BHL_ROOT/bhl.g", "$BHL_ROOT/tmp/bhl.g");
  ensure_copy("$BHL_ROOT/bin/g4sharp", "$BHL_ROOT/tmp/g4sharp");

  taskman_shell_ensure("cd $BHL_ROOT/tmp && sh g4sharp bhl.g && cp bhl*.cs ../src/g/ ");
}

/**
 * @deps build_front_dll 
 */
function task_run(array $args = array())
{
  global $BHL_ROOT;

  $bin = build_bin($args);

  mono_run($bin, $args, '--debug');
}

function build_bin(&$runtime_args) 
{
  global $BHL_ROOT;

  $sources = array(
    "$BHL_ROOT/bhl.cs",
    "$BHL_ROOT/bhl_front.dll", 
    "$BHL_ROOT/lz4.dll", 
    "$BHL_ROOT/mono_opts.dll",
    "$BHL_ROOT/Antlr4.Runtime.Standard.dll", 
  );

  if(taskman_propor('USER_SOURCES', ''))
  {
    $user_sources = explode(',', taskman_prop('USER_SOURCES', ''));
    $user_sources[] = "$BHL_ROOT/bhl_front.dll";
    $user_sources[] = "$BHL_ROOT/Antlr4.Runtime.Standard.dll"; 
    mcs_build($user_sources,
      "$BHL_ROOT/bhl_user.dll",
      "-define:BHL_FRONT -debug -target:library"
    );
    $runtime_args[] = "--bindings_dll=$BHL_ROOT/bhl_user.dll";
  }

  if(taskman_propor('POSTPROC_SOURCES', ''))
  {
    $postproc_sources = explode(',', taskman_prop('POSTPROC_SOURCES', ''));
    $postproc_sources[] = "$BHL_ROOT/bhl_front.dll";
    $postproc_sources[] = "$BHL_ROOT/Antlr4.Runtime.Standard.dll"; 
    mcs_build($postproc_sources,
      "$BHL_ROOT/bhl_postproc.dll",
      "-define:BHL_FRONT -debug -target:library"
    );
    $runtime_args[] = "--postproc_dll=$BHL_ROOT/bhl_postproc.dll";
  }

  mcs_build($sources,
    "$BHL_ROOT/bhl.exe",
    "-define:BHL_FRONT -debug"
  );

  //experimenting with AOT
  //if(need_to_regen("$BHL_ROOT/bhl.exe.dylib", array("$BHL_ROOT/bhl.exe")))
  //  taskman_shell_ensure("mono --aot=full -O=all $BHL_ROOT/bhl.exe");

  return "$BHL_ROOT/bhl.exe";
}

/**
 * @deps build_front_dll
 */
function task_build()
{
  build_bin($args);
}

/**
 * @deps build_front_dll
 */
function task_test(array $args = array())
{
  global $BHL_ROOT;

  mcs_build(array(
    "$BHL_ROOT/test.cs",
    "$BHL_ROOT/bhl_front.dll",
    "$BHL_ROOT/Antlr4.Runtime.Standard.dll", 
  ),
  "$BHL_ROOT/test.exe",
  "-define:BHL_FRONT -debug"
  );

  mono_run("$BHL_ROOT/test.exe", $args, '--debug ');
}

function mcs_bin()
{
  return "mcs";
}

function mono_bin()
{
  return "mono";
}

function _bhl_str_ends_with($haystack, $needle)
{
    // search forward starting from end minus needle length characters
    return $needle === "" || (($temp = strlen($haystack) - strlen($needle)) >= 0 && strpos($haystack, $needle, $temp) !== false);
}

function mcs_build(array $file_specs, $result, $opts = '', $binary = '')
{
  global $BHL_ROOT;

  $refs = array();
  $binary = $binary ? $binary : mcs_bin();

  $binary = cli_path($binary);

  $files = array();
  foreach($file_specs as $file_spec)
  {
    if(strpos($file_spec, '*') !== false)
    {
      $files = array_merge($files, glob($file_spec));
    }
    else
    {
      if(!is_file($file_spec))
        throw new Exception("Bad file '$file_spec'");
      $files[] = $file_spec;
    }
  }

  foreach($files as $idx => $file)
  {
    if(_bhl_str_ends_with($file, '.dll'))
    {
      unset($files[$idx]);
      $refs[] = $file;
    }
  } 

  if(!$files)
    throw new Exception("No files");

  $cmd = $binary . ($refs ? " -r:" . implode(" -r:", array_map('cli_path', $refs)) : "") . " $opts -out:" . cli_path($result) ." " . implode(" ", array_map('cli_path', $files)); 
  $cmd_hash = crc32($cmd);
  $cmd_hash_file = "$BHL_ROOT/build/" . crc32($result) . ".mhash";
  if(!is_file($cmd_hash_file) || file_get_contents($cmd_hash_file) != "$cmd_hash")
    ensure_write($cmd_hash_file, "$cmd_hash");
  $files[] = $cmd_hash_file;

  if(need_to_regen($result, $files) || need_to_regen($result, $refs))
  {
    //var_dump($cmd);
    taskman_shell_ensure($cmd);
  }
}

function mono_run($exe, array $args = array(), $opts = '')
{
  $cmd = cli_path(mono_bin()) . " $opts $exe " . implode(' ', $args);
  //var_dump($cmd);
  taskman_shell_ensure($cmd);
}

function task_genmeta()
{
  global $BHL_ROOT;

  include_once("$BHL_ROOT/deps/metagen/metagen.inc.php");
  include_once("$BHL_ROOT/deps/metagen/targets/cs/cs_generator.inc.php");

  $meta = mtg_parse_meta(array($BHL_ROOT));

  $codegen = new mtgCsCodegen();
  $codegen->namespace = 'bhl';

  mtg_run(new mtgCsGenerator(), array( 
    "codegen" => $codegen,
    "meta" => $meta,
    "out-dir" => "$BHL_ROOT/autogen" , 
    "bundle" => "$BHL_ROOT/src/autogen.cs", 
  ));
}

function task_ast_dump(array $args)
{
  $bin = file_get_contents($args[0]);
  $unpacked = msgpack_unpack($bin);
  var_dump($unpacked);
}
