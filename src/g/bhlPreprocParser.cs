//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from bhlPreprocParser.g by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class bhlPreprocParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SHARP=1, CODE=2, IF=3, ELSE=4, ENDIF=5, BANG=6, DIRECTIVE_WHITESPACES=7, 
		DIRECTIVE_STRING=8, CONDITIONAL_SYMBOL=9, NEW_LINE=10, DIRECTIVE_COMMENT=11, 
		SLASH=12;
	public const int
		RULE_program = 0, RULE_text = 1, RULE_code = 2, RULE_directive = 3, RULE_preprocessor_expression = 4;
	public static readonly string[] ruleNames = {
		"program", "text", "code", "directive", "preprocessor_expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", null, "'if'", "'else'", "'endif'", "'!'", null, null, null, 
		null, null, "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SHARP", "CODE", "IF", "ELSE", "ENDIF", "BANG", "DIRECTIVE_WHITESPACES", 
		"DIRECTIVE_STRING", "CONDITIONAL_SYMBOL", "NEW_LINE", "DIRECTIVE_COMMENT", 
		"SLASH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "bhlPreprocParser.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static bhlPreprocParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public bhlPreprocParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public bhlPreprocParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(bhlPreprocParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlPreprocParserVisitor<TResult> typedVisitor = visitor as IbhlPreprocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SHARP || _la==CODE) {
				{
				{
				State = 10;
				text();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 16;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARP() { return GetToken(bhlPreprocParser.SHARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_LINE() { return GetToken(bhlPreprocParser.NEW_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(bhlPreprocParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlPreprocParserVisitor<TResult> typedVisitor = visitor as IbhlPreprocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 2, RULE_text);
		int _la;
		try {
			State = 23;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SHARP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18;
				Match(SHARP);
				State = 19;
				directive();
				State = 20;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NEW_LINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case CODE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 22;
				code();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CODE() { return GetTokens(bhlPreprocParser.CODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE(int i) {
			return GetToken(bhlPreprocParser.CODE, i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlPreprocParserVisitor<TResult> typedVisitor = visitor as IbhlPreprocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 4, RULE_code);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 25;
					Match(CODE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 28;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
	 
		public DirectiveContext() { }
		public virtual void CopyFrom(DirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreprocConditionalContext : DirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(bhlPreprocParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(bhlPreprocParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF() { return GetToken(bhlPreprocParser.ENDIF, 0); }
		public PreprocConditionalContext(DirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.EnterPreprocConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.ExitPreprocConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlPreprocParserVisitor<TResult> typedVisitor = visitor as IbhlPreprocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 6, RULE_directive);
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				_localctx = new PreprocConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 30;
				Match(IF);
				State = 31;
				preprocessor_expression();
				}
				break;
			case ELSE:
				_localctx = new PreprocConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 32;
				Match(ELSE);
				}
				break;
			case ENDIF:
				_localctx = new PreprocConditionalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 33;
				Match(ENDIF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Preprocessor_expressionContext : ParserRuleContext {
		public Preprocessor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor_expression; } }
	 
		public Preprocessor_expressionContext() { }
		public virtual void CopyFrom(Preprocessor_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreprocNotContext : Preprocessor_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(bhlPreprocParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Preprocessor_expressionContext preprocessor_expression() {
			return GetRuleContext<Preprocessor_expressionContext>(0);
		}
		public PreprocNotContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.EnterPreprocNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.ExitPreprocNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlPreprocParserVisitor<TResult> typedVisitor = visitor as IbhlPreprocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocConditionalSymbolContext : Preprocessor_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL_SYMBOL() { return GetToken(bhlPreprocParser.CONDITIONAL_SYMBOL, 0); }
		public PreprocConditionalSymbolContext(Preprocessor_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.EnterPreprocConditionalSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlPreprocParserListener typedListener = listener as IbhlPreprocParserListener;
			if (typedListener != null) typedListener.ExitPreprocConditionalSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlPreprocParserVisitor<TResult> typedVisitor = visitor as IbhlPreprocParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocConditionalSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Preprocessor_expressionContext preprocessor_expression() {
		Preprocessor_expressionContext _localctx = new Preprocessor_expressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_preprocessor_expression);
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONDITIONAL_SYMBOL:
				_localctx = new PreprocConditionalSymbolContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 36;
				Match(CONDITIONAL_SYMBOL);
				}
				break;
			case BANG:
				_localctx = new PreprocNotContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 37;
				Match(BANG);
				State = 38;
				preprocessor_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,12,42,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,5,0,12,8,0,10,0,
		12,0,15,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,24,8,1,1,2,4,2,27,8,2,11,2,
		12,2,28,1,3,1,3,1,3,1,3,3,3,35,8,3,1,4,1,4,1,4,3,4,40,8,4,1,4,0,0,5,0,
		2,4,6,8,0,1,1,1,10,10,42,0,13,1,0,0,0,2,23,1,0,0,0,4,26,1,0,0,0,6,34,1,
		0,0,0,8,39,1,0,0,0,10,12,3,2,1,0,11,10,1,0,0,0,12,15,1,0,0,0,13,11,1,0,
		0,0,13,14,1,0,0,0,14,16,1,0,0,0,15,13,1,0,0,0,16,17,5,0,0,1,17,1,1,0,0,
		0,18,19,5,1,0,0,19,20,3,6,3,0,20,21,7,0,0,0,21,24,1,0,0,0,22,24,3,4,2,
		0,23,18,1,0,0,0,23,22,1,0,0,0,24,3,1,0,0,0,25,27,5,2,0,0,26,25,1,0,0,0,
		27,28,1,0,0,0,28,26,1,0,0,0,28,29,1,0,0,0,29,5,1,0,0,0,30,31,5,3,0,0,31,
		35,3,8,4,0,32,35,5,4,0,0,33,35,5,5,0,0,34,30,1,0,0,0,34,32,1,0,0,0,34,
		33,1,0,0,0,35,7,1,0,0,0,36,40,5,9,0,0,37,38,5,6,0,0,38,40,3,8,4,0,39,36,
		1,0,0,0,39,37,1,0,0,0,40,9,1,0,0,0,5,13,23,28,34,39
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
