//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./grammar/bhlPreprocParser.g by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="bhlPreprocParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IbhlPreprocParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="bhlPreprocParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] bhlPreprocParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="bhlPreprocParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] bhlPreprocParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="bhlPreprocParser.text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterText([NotNull] bhlPreprocParser.TextContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="bhlPreprocParser.text"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitText([NotNull] bhlPreprocParser.TextContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="bhlPreprocParser.code"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCode([NotNull] bhlPreprocParser.CodeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="bhlPreprocParser.code"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCode([NotNull] bhlPreprocParser.CodeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocConditional</c>
	/// labeled alternative in <see cref="bhlPreprocParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocConditional([NotNull] bhlPreprocParser.PreprocConditionalContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocConditional</c>
	/// labeled alternative in <see cref="bhlPreprocParser.directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocConditional([NotNull] bhlPreprocParser.PreprocConditionalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocConditionalSymbol</c>
	/// labeled alternative in <see cref="bhlPreprocParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocConditionalSymbol([NotNull] bhlPreprocParser.PreprocConditionalSymbolContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocConditionalSymbol</c>
	/// labeled alternative in <see cref="bhlPreprocParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocConditionalSymbol([NotNull] bhlPreprocParser.PreprocConditionalSymbolContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>preprocNot</c>
	/// labeled alternative in <see cref="bhlPreprocParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocNot([NotNull] bhlPreprocParser.PreprocNotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>preprocNot</c>
	/// labeled alternative in <see cref="bhlPreprocParser.preprocessor_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocNot([NotNull] bhlPreprocParser.PreprocNotContext context);
}
