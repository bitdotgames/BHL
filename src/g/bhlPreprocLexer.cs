//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from bhlPreprocLexer.g by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class bhlPreprocLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SHARP=1, CODE=2, IF=3, ELSE=4, ENDIF=5, BANG=6, DIRECTIVE_WHITESPACES=7, 
		DIRECTIVE_STRING=8, CONDITIONAL_SYMBOL=9, NEW_LINE=10, DIRECTIVE_COMMENT=11, 
		SLASH=12;
	public const int
		COMMENTS_CHANNEL=2;
	public const int
		DIRECTIVE_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "COMMENTS_CHANNEL"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "DIRECTIVE_MODE"
	};

	public static readonly string[] ruleNames = {
		"SHARP", "COMMENT", "LINE_COMMENT", "SLASH", "CHARACTER_LITERAL", "QUOTE_STRING", 
		"STRING", "CODE", "IF", "ELSE", "ENDIF", "BANG", "DIRECTIVE_WHITESPACES", 
		"DIRECTIVE_STRING", "CONDITIONAL_SYMBOL", "NEW_LINE", "DIRECTIVE_COMMENT", 
		"EscapeSequence", "OctalEscape", "UnicodeEscape", "HexDigit", "StringFragment", 
		"LETTER"
	};


	public bhlPreprocLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public bhlPreprocLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'#'", null, "'if'", "'else'", "'endif'", "'!'", null, null, null, 
		null, null, "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SHARP", "CODE", "IF", "ELSE", "ENDIF", "BANG", "DIRECTIVE_WHITESPACES", 
		"DIRECTIVE_STRING", "CONDITIONAL_SYMBOL", "NEW_LINE", "DIRECTIVE_COMMENT", 
		"SLASH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "bhlPreprocLexer.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static bhlPreprocLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,12,209,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,57,8,1,10,1,12,
		1,60,9,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,71,8,2,10,2,12,2,74,9,
		2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,3,4,85,8,4,1,4,1,4,1,4,1,4,1,5,1,
		5,1,5,5,5,94,8,5,10,5,12,5,97,9,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,
		4,7,108,8,7,11,7,12,7,109,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
		10,1,10,1,10,1,10,1,11,1,11,1,12,4,12,129,8,12,11,12,12,12,130,1,12,1,
		12,1,13,1,13,1,14,1,14,1,14,5,14,140,8,14,10,14,12,14,143,9,14,1,15,3,
		15,146,8,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,156,8,16,10,16,
		12,16,159,9,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,3,17,170,8,
		17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,181,8,18,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,5,21,196,8,21,10,
		21,12,21,199,9,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,208,8,22,2,58,
		157,0,23,2,1,4,0,6,0,8,12,10,0,12,0,14,0,16,2,18,3,20,4,22,5,24,6,26,7,
		28,8,30,9,32,10,34,11,36,0,38,0,40,0,42,0,44,0,46,0,2,0,1,15,2,0,10,10,
		13,13,2,0,39,39,92,92,3,0,34,35,39,39,47,47,2,0,9,9,32,32,1,0,48,57,8,
		0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,1,0,48,51,1,
		0,48,55,3,0,48,57,65,70,97,102,2,0,34,34,92,92,4,0,36,36,65,90,95,95,97,
		122,2,0,0,255,55296,56319,1,0,55296,56319,1,0,56320,57343,1,0,233,233,
		221,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,
		1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,1,18,1,0,0,0,1,20,1,0,0,0,1,22,1,0,0,
		0,1,24,1,0,0,0,1,26,1,0,0,0,1,28,1,0,0,0,1,30,1,0,0,0,1,32,1,0,0,0,1,34,
		1,0,0,0,2,48,1,0,0,0,4,52,1,0,0,0,6,66,1,0,0,0,8,77,1,0,0,0,10,81,1,0,
		0,0,12,90,1,0,0,0,14,102,1,0,0,0,16,107,1,0,0,0,18,111,1,0,0,0,20,114,
		1,0,0,0,22,119,1,0,0,0,24,125,1,0,0,0,26,128,1,0,0,0,28,134,1,0,0,0,30,
		136,1,0,0,0,32,145,1,0,0,0,34,151,1,0,0,0,36,169,1,0,0,0,38,180,1,0,0,
		0,40,182,1,0,0,0,42,189,1,0,0,0,44,191,1,0,0,0,46,207,1,0,0,0,48,49,5,
		35,0,0,49,50,1,0,0,0,50,51,6,0,0,0,51,3,1,0,0,0,52,53,5,47,0,0,53,54,5,
		42,0,0,54,58,1,0,0,0,55,57,9,0,0,0,56,55,1,0,0,0,57,60,1,0,0,0,58,59,1,
		0,0,0,58,56,1,0,0,0,59,61,1,0,0,0,60,58,1,0,0,0,61,62,5,42,0,0,62,63,5,
		47,0,0,63,64,1,0,0,0,64,65,6,1,1,0,65,5,1,0,0,0,66,67,5,47,0,0,67,68,5,
		47,0,0,68,72,1,0,0,0,69,71,8,0,0,0,70,69,1,0,0,0,71,74,1,0,0,0,72,70,1,
		0,0,0,72,73,1,0,0,0,73,75,1,0,0,0,74,72,1,0,0,0,75,76,6,2,1,0,76,7,1,0,
		0,0,77,78,5,47,0,0,78,79,1,0,0,0,79,80,6,3,1,0,80,9,1,0,0,0,81,84,5,39,
		0,0,82,85,3,36,17,0,83,85,8,1,0,0,84,82,1,0,0,0,84,83,1,0,0,0,85,86,1,
		0,0,0,86,87,5,39,0,0,87,88,1,0,0,0,88,89,6,4,1,0,89,11,1,0,0,0,90,95,5,
		39,0,0,91,94,3,36,17,0,92,94,8,1,0,0,93,91,1,0,0,0,93,92,1,0,0,0,94,97,
		1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,98,1,0,0,0,97,95,1,0,0,0,98,99,
		5,39,0,0,99,100,1,0,0,0,100,101,6,5,1,0,101,13,1,0,0,0,102,103,3,44,21,
		0,103,104,1,0,0,0,104,105,6,6,1,0,105,15,1,0,0,0,106,108,8,2,0,0,107,106,
		1,0,0,0,108,109,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,17,1,0,0,0,
		111,112,5,105,0,0,112,113,5,102,0,0,113,19,1,0,0,0,114,115,5,101,0,0,115,
		116,5,108,0,0,116,117,5,115,0,0,117,118,5,101,0,0,118,21,1,0,0,0,119,120,
		5,101,0,0,120,121,5,110,0,0,121,122,5,100,0,0,122,123,5,105,0,0,123,124,
		5,102,0,0,124,23,1,0,0,0,125,126,5,33,0,0,126,25,1,0,0,0,127,129,7,3,0,
		0,128,127,1,0,0,0,129,130,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,
		132,1,0,0,0,132,133,6,12,2,0,133,27,1,0,0,0,134,135,3,44,21,0,135,29,1,
		0,0,0,136,141,3,46,22,0,137,140,3,46,22,0,138,140,7,4,0,0,139,137,1,0,
		0,0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,
		31,1,0,0,0,143,141,1,0,0,0,144,146,5,13,0,0,145,144,1,0,0,0,145,146,1,
		0,0,0,146,147,1,0,0,0,147,148,5,10,0,0,148,149,1,0,0,0,149,150,6,15,3,
		0,150,33,1,0,0,0,151,152,5,47,0,0,152,153,5,42,0,0,153,157,1,0,0,0,154,
		156,9,0,0,0,155,154,1,0,0,0,156,159,1,0,0,0,157,158,1,0,0,0,157,155,1,
		0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,161,5,42,0,0,161,162,5,47,0,
		0,162,163,1,0,0,0,163,164,6,16,4,0,164,35,1,0,0,0,165,166,5,92,0,0,166,
		170,7,5,0,0,167,170,3,38,18,0,168,170,3,40,19,0,169,165,1,0,0,0,169,167,
		1,0,0,0,169,168,1,0,0,0,170,37,1,0,0,0,171,172,5,92,0,0,172,173,7,6,0,
		0,173,174,7,7,0,0,174,181,7,7,0,0,175,176,5,92,0,0,176,177,7,7,0,0,177,
		181,7,7,0,0,178,179,5,92,0,0,179,181,7,7,0,0,180,171,1,0,0,0,180,175,1,
		0,0,0,180,178,1,0,0,0,181,39,1,0,0,0,182,183,5,92,0,0,183,184,5,117,0,
		0,184,185,3,42,20,0,185,186,3,42,20,0,186,187,3,42,20,0,187,188,3,42,20,
		0,188,41,1,0,0,0,189,190,7,8,0,0,190,43,1,0,0,0,191,197,5,34,0,0,192,196,
		8,9,0,0,193,194,5,92,0,0,194,196,9,0,0,0,195,192,1,0,0,0,195,193,1,0,0,
		0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,200,1,0,0,0,199,
		197,1,0,0,0,200,201,5,34,0,0,201,45,1,0,0,0,202,208,7,10,0,0,203,208,8,
		11,0,0,204,205,7,12,0,0,205,208,7,13,0,0,206,208,7,14,0,0,207,202,1,0,
		0,0,207,203,1,0,0,0,207,204,1,0,0,0,207,206,1,0,0,0,208,47,1,0,0,0,18,
		0,1,58,72,84,93,95,109,130,139,141,145,157,169,180,195,197,207,5,2,1,0,
		7,2,0,0,1,0,2,0,0,0,2,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
