//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from bhlParser.g by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class bhlParser : bhlParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IMPORT=1, NULL=2, FALSE=3, TRUE=4, IF=5, ELSE=6, WHILE=7, DO=8, FOR=9, 
		FOREACH=10, IN=11, BREAK=12, CONTINUE=13, RETURN=14, YIELD=15, AS=16, 
		IS=17, TYPEOF=18, NEW=19, PARAL=20, PARAL_ALL=21, DEFER=22, NAMESPACE=23, 
		CLASS=24, INTERFACE=25, ENUM=26, VIRTUAL=27, OVERRIDE=28, STATIC=29, CORO=30, 
		FUNC=31, REF=32, LOR=33, LAND=34, BOR=35, BAND=36, INC=37, DEC=38, SINC=39, 
		SDEC=40, SMUL=41, SDIV=42, LT=43, LTE=44, GT=45, GTE=46, NEQ=47, EQ=48, 
		PLUS=49, MINUS=50, MUL=51, DIV=52, MOD=53, NOT=54, NAME=55, ARR=56, GLOBAL=57, 
		VARIADIC=58, ASSIGN=59, SEMI=60, COLON=61, DOT=62, OPEN_BRACKET=63, CLOSE_BRACKET=64, 
		OPEN_PAREN=65, CLOSE_PAREN=66, OPEN_BRACE=67, CLOSE_BRACE=68, COMMA=69, 
		QUESTION=70, NORMALSTRING=71, INT=72, HEX=73, FLOAT=74, SINGLE_LINE_COMMENT=75, 
		DELIMITED_COMMENT=76, WS=77, NL=78;
	public const int
		RULE_program = 0, RULE_declOrImport = 1, RULE_mimport = 2, RULE_decl = 3, 
		RULE_dotName = 4, RULE_nsName = 5, RULE_type = 6, RULE_mapType = 7, RULE_expList = 8, 
		RULE_name = 9, RULE_chainExp = 10, RULE_exp = 11, RULE_ternaryIfExp = 12, 
		RULE_newExp = 13, RULE_foreachExp = 14, RULE_forPreIter = 15, RULE_forPostIter = 16, 
		RULE_forExp = 17, RULE_statement = 18, RULE_elseIf = 19, RULE_else = 20, 
		RULE_chainExpItem = 21, RULE_arrAccess = 22, RULE_memberAccess = 23, RULE_callArgs = 24, 
		RULE_callArgsList = 25, RULE_callArg = 26, RULE_block = 27, RULE_extensions = 28, 
		RULE_nsDecl = 29, RULE_classDecl = 30, RULE_classBlock = 31, RULE_classMembers = 32, 
		RULE_fldAttribs = 33, RULE_fldDeclare = 34, RULE_classMember = 35, RULE_interfaceDecl = 36, 
		RULE_interfaceBlock = 37, RULE_interfaceMembers = 38, RULE_interfaceMember = 39, 
		RULE_enumDecl = 40, RULE_enumBlock = 41, RULE_enumMember = 42, RULE_funcAttribs = 43, 
		RULE_funcDecl = 44, RULE_funcType = 45, RULE_funcBlock = 46, RULE_interfaceFuncDecl = 47, 
		RULE_funcLambda = 48, RULE_refType = 49, RULE_retType = 50, RULE_captureList = 51, 
		RULE_types = 52, RULE_funcParams = 53, RULE_funcParamDeclare = 54, RULE_varDeclare = 55, 
		RULE_varDeclareList = 56, RULE_varDeclareOptAssign = 57, RULE_varOrDeclare = 58, 
		RULE_varOrDeclareAssign = 59, RULE_varDeclareOrChainExp = 60, RULE_varDeclaresOrChainExps = 61, 
		RULE_modifyOp = 62, RULE_expModifyOp = 63, RULE_assignExp = 64, RULE_operatorBitwise = 65, 
		RULE_operatorIncDec = 66, RULE_operatorSelfOp = 67, RULE_operatorComparison = 68, 
		RULE_operatorAddSub = 69, RULE_operatorMulDivMod = 70, RULE_operatorUnary = 71, 
		RULE_number = 72, RULE_string = 73, RULE_jsonObject = 74, RULE_jsonEmptyObj = 75, 
		RULE_jsonPair = 76, RULE_jsonArray = 77, RULE_jsonEmptyArr = 78, RULE_jsonValue = 79, 
		RULE_eos = 80;
	public static readonly string[] ruleNames = {
		"program", "declOrImport", "mimport", "decl", "dotName", "nsName", "type", 
		"mapType", "expList", "name", "chainExp", "exp", "ternaryIfExp", "newExp", 
		"foreachExp", "forPreIter", "forPostIter", "forExp", "statement", "elseIf", 
		"else", "chainExpItem", "arrAccess", "memberAccess", "callArgs", "callArgsList", 
		"callArg", "block", "extensions", "nsDecl", "classDecl", "classBlock", 
		"classMembers", "fldAttribs", "fldDeclare", "classMember", "interfaceDecl", 
		"interfaceBlock", "interfaceMembers", "interfaceMember", "enumDecl", "enumBlock", 
		"enumMember", "funcAttribs", "funcDecl", "funcType", "funcBlock", "interfaceFuncDecl", 
		"funcLambda", "refType", "retType", "captureList", "types", "funcParams", 
		"funcParamDeclare", "varDeclare", "varDeclareList", "varDeclareOptAssign", 
		"varOrDeclare", "varOrDeclareAssign", "varDeclareOrChainExp", "varDeclaresOrChainExps", 
		"modifyOp", "expModifyOp", "assignExp", "operatorBitwise", "operatorIncDec", 
		"operatorSelfOp", "operatorComparison", "operatorAddSub", "operatorMulDivMod", 
		"operatorUnary", "number", "string", "jsonObject", "jsonEmptyObj", "jsonPair", 
		"jsonArray", "jsonEmptyArr", "jsonValue", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "'null'", "'false'", "'true'", "'if'", "'else'", "'while'", 
		"'do'", "'for'", "'foreach'", "'in'", "'break'", "'continue'", "'return'", 
		"'yield'", "'as'", "'is'", "'typeof'", "'new'", "'paral'", "'paral_all'", 
		"'defer'", "'namespace'", "'class'", "'interface'", "'enum'", "'virtual'", 
		"'override'", "'static'", "'coro'", "'func'", "'ref'", "'||'", "'&&'", 
		"'|'", "'&'", "'++'", "'--'", "'+='", "'-='", "'*='", "'/='", "'<'", "'<='", 
		"'>'", "'>='", "'!='", "'=='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", 
		null, null, "'..'", "'...'", "'='", "';'", "':'", "'.'", "'['", "']'", 
		"'('", "')'", "'{'", "'}'", "','", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IMPORT", "NULL", "FALSE", "TRUE", "IF", "ELSE", "WHILE", "DO", 
		"FOR", "FOREACH", "IN", "BREAK", "CONTINUE", "RETURN", "YIELD", "AS", 
		"IS", "TYPEOF", "NEW", "PARAL", "PARAL_ALL", "DEFER", "NAMESPACE", "CLASS", 
		"INTERFACE", "ENUM", "VIRTUAL", "OVERRIDE", "STATIC", "CORO", "FUNC", 
		"REF", "LOR", "LAND", "BOR", "BAND", "INC", "DEC", "SINC", "SDEC", "SMUL", 
		"SDIV", "LT", "LTE", "GT", "GTE", "NEQ", "EQ", "PLUS", "MINUS", "MUL", 
		"DIV", "MOD", "NOT", "NAME", "ARR", "GLOBAL", "VARIADIC", "ASSIGN", "SEMI", 
		"COLON", "DOT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", 
		"OPEN_BRACE", "CLOSE_BRACE", "COMMA", "QUESTION", "NORMALSTRING", "INT", 
		"HEX", "FLOAT", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WS", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "bhlParser.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static bhlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public bhlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public bhlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(bhlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclOrImportContext[] declOrImport() {
			return GetRuleContexts<DeclOrImportContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclOrImportContext declOrImport(int i) {
			return GetRuleContext<DeclOrImportContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8971170453435449342L) != 0)) {
				{
				{
				State = 162;
				declOrImport();
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 168;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclOrImportContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl() {
			return GetRuleContext<DeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MimportContext mimport() {
			return GetRuleContext<MimportContext>(0);
		}
		public DeclOrImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declOrImport; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterDeclOrImport(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitDeclOrImport(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclOrImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclOrImportContext declOrImport() {
		DeclOrImportContext _localctx = new DeclOrImportContext(Context, State);
		EnterRule(_localctx, 2, RULE_declOrImport);
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
			case CLASS:
			case INTERFACE:
			case ENUM:
			case VIRTUAL:
			case OVERRIDE:
			case STATIC:
			case CORO:
			case FUNC:
			case NAME:
			case ARR:
			case GLOBAL:
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				decl();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				mimport();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MimportContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(bhlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALSTRING() { return GetToken(bhlParser.NORMALSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(bhlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(bhlParser.SEMI, i);
		}
		public MimportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mimport; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterMimport(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitMimport(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMimport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MimportContext mimport() {
		MimportContext _localctx = new MimportContext(Context, State);
		EnterRule(_localctx, 4, RULE_mimport);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(IMPORT);
			State = 175;
			Match(NORMALSTRING);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 176;
				Match(SEMI);
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NsDeclContext nsDecl() {
			return GetRuleContext<NsDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclContext interfaceDecl() {
			return GetRuleContext<InterfaceDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl() {
			return GetRuleContext<FuncDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareOptAssignContext varDeclareOptAssign() {
			return GetRuleContext<VarDeclareOptAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclContext enumDecl() {
			return GetRuleContext<EnumDeclContext>(0);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 182;
				nsDecl();
				}
				break;
			case 2:
				{
				State = 183;
				classDecl();
				}
				break;
			case 3:
				{
				State = 184;
				interfaceDecl();
				}
				break;
			case 4:
				{
				State = 185;
				funcDecl();
				}
				break;
			case 5:
				{
				State = 186;
				varDeclareOptAssign();
				}
				break;
			case 6:
				{
				State = 187;
				enumDecl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext[] memberAccess() {
			return GetRuleContexts<MemberAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext memberAccess(int i) {
			return GetRuleContext<MemberAccessContext>(i);
		}
		public DotNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterDotName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitDotName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotNameContext dotName() {
		DotNameContext _localctx = new DotNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_dotName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(NAME);
			State = 194;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 191;
					memberAccess();
					}
					} 
				}
				State = 196;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NsNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DotNameContext dotName() {
			return GetRuleContext<DotNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(bhlParser.GLOBAL, 0); }
		public NsNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nsName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterNsName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitNsName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNsName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NsNameContext nsName() {
		NsNameContext _localctx = new NsNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_nsName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL) {
				{
				State = 197;
				Match(GLOBAL);
				}
			}

			State = 200;
			dotName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NsNameContext nsName() {
			return GetRuleContext<NsNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeContext funcType() {
			return GetRuleContext<FuncTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARR() { return GetToken(bhlParser.ARR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapTypeContext mapType() {
			return GetRuleContext<MapTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARR:
				{
				State = 202;
				Match(ARR);
				}
				break;
			case OPEN_BRACKET:
				{
				State = 203;
				mapType();
				}
				break;
			case CORO:
			case FUNC:
			case NAME:
			case GLOBAL:
				break;
			default:
				break;
			}
			State = 208;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
			case GLOBAL:
				{
				State = 206;
				nsName();
				}
				break;
			case CORO:
			case FUNC:
				{
				State = 207;
				funcType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(bhlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NsNameContext nsName() {
			return GetRuleContext<NsNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(bhlParser.CLOSE_BRACKET, 0); }
		public MapTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterMapType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitMapType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapTypeContext mapType() {
		MapTypeContext _localctx = new MapTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_mapType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(OPEN_BRACKET);
			State = 211;
			nsName();
			State = 212;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public ExpListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpListContext expList() {
		ExpListContext _localctx = new ExpListContext(Context, State);
		EnterRule(_localctx, 16, RULE_expList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			exp(0);
			State = 219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 215;
					Match(COMMA);
					State = 216;
					exp(0);
					}
					} 
				}
				State = 221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(bhlParser.GLOBAL, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 18, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL) {
				{
				State = 222;
				Match(GLOBAL);
				}
			}

			State = 225;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncLambdaContext funcLambda() {
			return GetRuleContext<FuncLambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpItemContext[] chainExpItem() {
			return GetRuleContexts<ChainExpItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpItemContext chainExpItem(int i) {
			return GetRuleContext<ChainExpItemContext>(i);
		}
		public ChainExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterChainExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitChainExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainExpContext chainExp() {
		ChainExpContext _localctx = new ChainExpContext(Context, State);
		EnterRule(_localctx, 20, RULE_chainExp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
			case GLOBAL:
				{
				State = 227;
				name();
				}
				break;
			case OPEN_PAREN:
				{
				State = 228;
				Match(OPEN_PAREN);
				State = 229;
				exp(0);
				State = 230;
				Match(CLOSE_PAREN);
				}
				break;
			case CORO:
			case FUNC:
				{
				State = 232;
				funcLambda();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 238;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 235;
					chainExpItem();
					}
					} 
				}
				State = 240;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpJsonArrContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonArrayContext jsonArray() {
			return GetRuleContext<JsonArrayContext>(0);
		}
		public ExpJsonArrContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpJsonArr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpJsonArr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpJsonArr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpTypeofContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(bhlParser.TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		public ExpTypeofContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpTypeof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpTypeof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpTypeof(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpIsContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(bhlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpIsContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpIs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpIs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralFalseContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(bhlParser.FALSE, 0); }
		public ExpLiteralFalseContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLiteralFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLiteralFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralNumContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ExpLiteralNumContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLiteralNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLiteralNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMulDivModContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public ExpMulDivModContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpCompareContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public ExpCompareContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpCompare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpCompare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAsContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(bhlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpAsContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpAs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpAs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralStrContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ExpLiteralStrContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLiteralStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLiteralStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralTrueContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(bhlParser.TRUE, 0); }
		public ExpLiteralTrueContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLiteralTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLiteralTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpJsonObjContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonObjectContext jsonObject() {
			return GetRuleContext<JsonObjectContext>(0);
		}
		public ExpJsonObjContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpJsonObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpJsonObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpJsonObj(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpUnaryContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ExpUnaryContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNewContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewExpContext newExp() {
			return GetRuleContext<NewExpContext>(0);
		}
		public ExpNewContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpNew(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpNew(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAddSubContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public ExpAddSubContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpYieldCallContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(bhlParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpContext chainExp() {
			return GetRuleContext<ChainExpContext>(0);
		}
		public ExpYieldCallContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpYieldCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpYieldCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpYieldCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpBitwiseContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public ExpBitwiseContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralNullContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(bhlParser.NULL, 0); }
		public ExpLiteralNullContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLiteralNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLiteralNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpTypeCastContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ExpTypeCastContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpTypeCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpTypeCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpTypeCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpTernaryIfContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TernaryIfExpContext ternaryIfExp() {
			return GetRuleContext<TernaryIfExpContext>(0);
		}
		public ExpTernaryIfContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpTernaryIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpTernaryIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpTernaryIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLogicalAndContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAND() { return GetToken(bhlParser.LAND, 0); }
		public ExpLogicalAndContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLogicalAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLogicalAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLogicalOrContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOR() { return GetToken(bhlParser.LOR, 0); }
		public ExpLogicalOrContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLogicalOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLogicalOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLambdaContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncLambdaContext funcLambda() {
			return GetRuleContext<FuncLambdaContext>(0);
		}
		public ExpLambdaContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLambda(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpChainContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpContext chainExp() {
			return GetRuleContext<ChainExpContext>(0);
		}
		public ExpChainContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new ExpLiteralNullContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 242;
				Match(NULL);
				}
				break;
			case 2:
				{
				_localctx = new ExpLiteralFalseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 243;
				Match(FALSE);
				}
				break;
			case 3:
				{
				_localctx = new ExpLiteralTrueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 244;
				Match(TRUE);
				}
				break;
			case 4:
				{
				_localctx = new ExpLiteralNumContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 245;
				number();
				}
				break;
			case 5:
				{
				_localctx = new ExpLiteralStrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 246;
				@string();
				}
				break;
			case 6:
				{
				_localctx = new ExpTypeCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 247;
				Match(OPEN_PAREN);
				State = 248;
				type();
				State = 249;
				Match(CLOSE_PAREN);
				State = 250;
				exp(18);
				}
				break;
			case 7:
				{
				_localctx = new ExpChainContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 252;
				chainExp();
				}
				break;
			case 8:
				{
				_localctx = new ExpLambdaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 253;
				funcLambda();
				}
				break;
			case 9:
				{
				_localctx = new ExpTypeofContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 254;
				Match(TYPEOF);
				State = 255;
				Match(OPEN_PAREN);
				State = 256;
				type();
				State = 257;
				Match(CLOSE_PAREN);
				}
				break;
			case 10:
				{
				_localctx = new ExpJsonObjContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 259;
				jsonObject();
				}
				break;
			case 11:
				{
				_localctx = new ExpJsonArrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 260;
				jsonArray();
				}
				break;
			case 12:
				{
				_localctx = new ExpYieldCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 261;
				Match(YIELD);
				State = 262;
				chainExp();
				}
				break;
			case 13:
				{
				_localctx = new ExpUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 263;
				operatorUnary();
				State = 264;
				exp(9);
				}
				break;
			case 14:
				{
				_localctx = new ExpNewContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 266;
				newExp();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 301;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 299;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new ExpBitwiseContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 269;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 270;
						operatorBitwise();
						State = 271;
						exp(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpMulDivModContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 273;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 274;
						operatorMulDivMod();
						State = 275;
						exp(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpAddSubContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 277;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 278;
						operatorAddSub();
						State = 279;
						exp(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpCompareContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 281;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 282;
						operatorComparison();
						State = 283;
						exp(6);
						}
						break;
					case 5:
						{
						_localctx = new ExpLogicalAndContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 285;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 286;
						Match(LAND);
						State = 287;
						exp(5);
						}
						break;
					case 6:
						{
						_localctx = new ExpLogicalOrContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 288;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 289;
						Match(LOR);
						State = 290;
						exp(4);
						}
						break;
					case 7:
						{
						_localctx = new ExpAsContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 291;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 292;
						Match(AS);
						State = 293;
						type();
						}
						break;
					case 8:
						{
						_localctx = new ExpIsContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 294;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 295;
						Match(IS);
						State = 296;
						type();
						}
						break;
					case 9:
						{
						_localctx = new ExpTernaryIfContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 297;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 298;
						ternaryIfExp();
						}
						break;
					}
					} 
				}
				State = 303;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TernaryIfExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(bhlParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(bhlParser.COLON, 0); }
		public TernaryIfExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternaryIfExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterTernaryIfExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitTernaryIfExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryIfExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TernaryIfExpContext ternaryIfExp() {
		TernaryIfExpContext _localctx = new TernaryIfExpContext(Context, State);
		EnterRule(_localctx, 24, RULE_ternaryIfExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			Match(QUESTION);
			State = 305;
			exp(0);
			State = 306;
			Match(COLON);
			State = 307;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(bhlParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonObjectContext jsonObject() {
			return GetRuleContext<JsonObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonArrayContext jsonArray() {
			return GetRuleContext<JsonArrayContext>(0);
		}
		public NewExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterNewExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitNewExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExpContext newExp() {
		NewExpContext _localctx = new NewExpContext(Context, State);
		EnterRule(_localctx, 26, RULE_newExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(NEW);
			State = 310;
			type();
			State = 316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 311;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 314;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_BRACE:
					{
					State = 312;
					jsonObject();
					}
					break;
				case ARR:
				case OPEN_BRACKET:
					{
					State = 313;
					jsonArray();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarOrDeclareContext[] varOrDeclare() {
			return GetRuleContexts<VarOrDeclareContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarOrDeclareContext varOrDeclare(int i) {
			return GetRuleContext<VarOrDeclareContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(bhlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public ForeachExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterForeachExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitForeachExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachExpContext foreachExp() {
		ForeachExpContext _localctx = new ForeachExpContext(Context, State);
		EnterRule(_localctx, 28, RULE_foreachExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(OPEN_PAREN);
			State = 319;
			varOrDeclare();
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 320;
				Match(COMMA);
				State = 321;
				varOrDeclare();
				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 327;
			Match(IN);
			State = 328;
			exp(0);
			State = 329;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForPreIterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrDeclareAssignContext[] varOrDeclareAssign() {
			return GetRuleContexts<VarOrDeclareAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarOrDeclareAssignContext varOrDeclareAssign(int i) {
			return GetRuleContext<VarOrDeclareAssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public ForPreIterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forPreIter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterForPreIter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitForPreIter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForPreIter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForPreIterContext forPreIter() {
		ForPreIterContext _localctx = new ForPreIterContext(Context, State);
		EnterRule(_localctx, 30, RULE_forPreIter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			varOrDeclareAssign();
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 332;
				Match(COMMA);
				State = 333;
				varOrDeclareAssign();
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForPostIterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpModifyOpContext[] expModifyOp() {
			return GetRuleContexts<ExpModifyOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpModifyOpContext expModifyOp(int i) {
			return GetRuleContext<ExpModifyOpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public ForPostIterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forPostIter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterForPostIter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitForPostIter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForPostIter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForPostIterContext forPostIter() {
		ForPostIterContext _localctx = new ForPostIterContext(Context, State);
		EnterRule(_localctx, 32, RULE_forPostIter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			expModifyOp();
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 340;
				Match(COMMA);
				State = 341;
				expModifyOp();
				}
				}
				State = 346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(bhlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(bhlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForPreIterContext forPreIter() {
			return GetRuleContext<ForPreIterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForPostIterContext forPostIter() {
			return GetRuleContext<ForPostIterContext>(0);
		}
		public ForExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterForExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitForExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForExpContext forExp() {
		ForExpContext _localctx = new ForExpContext(Context, State);
		EnterRule(_localctx, 34, RULE_forExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(OPEN_PAREN);
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8971170454500802560L) != 0)) {
				{
				State = 348;
				forPreIter();
				}
			}

			State = 351;
			Match(SEMI);
			State = 352;
			exp(0);
			State = 353;
			Match(SEMI);
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 34527510531L) != 0)) {
				{
				State = 354;
				forPostIter();
				}
			}

			State = 357;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmSeparatorContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(bhlParser.SEMI, 0); }
		public StmSeparatorContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmSeparator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmChainExpContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpContext chainExp() {
			return GetRuleContext<ChainExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifyOpContext modifyOp() {
			return GetRuleContext<ModifyOpContext>(0);
		}
		public StmChainExpContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmChainExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmChainExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmChainExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmDoWhileContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(bhlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(bhlParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StmDoWhileContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmDoWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmDoWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmDoWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmDeferContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFER() { return GetToken(bhlParser.DEFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmDeferContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmDefer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmDefer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmDefer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmParalContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAL() { return GetToken(bhlParser.PARAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmParalContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmParal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmParal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmParal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmWhileContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(bhlParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmWhileContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmForContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(bhlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForExpContext forExp() {
			return GetRuleContext<ForExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmForContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmFor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmDeclOptAssignContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareListContext varDeclareList() {
			return GetRuleContext<VarDeclareListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		public StmDeclOptAssignContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmDeclOptAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmDeclOptAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmDeclOptAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmYieldContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(bhlParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StmYieldContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmYield(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmYield(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmYield(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmIfContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(bhlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfContext[] elseIf() {
			return GetRuleContexts<ElseIfContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfContext elseIf(int i) {
			return GetRuleContext<ElseIfContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public StmIfContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmReturnContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(bhlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpListContext expList() {
			return GetRuleContext<ExpListContext>(0);
		}
		public StmReturnContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmDeclOrExpAssignContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclaresOrChainExpsContext varDeclaresOrChainExps() {
			return GetRuleContext<VarDeclaresOrChainExpsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StmDeclOrExpAssignContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmDeclOrExpAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmDeclOrExpAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmDeclOrExpAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmContinueContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(bhlParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StmContinueContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmContinue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmContinue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmContinue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmBlockNestedContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmBlockNestedContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmBlockNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmBlockNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmBlockNested(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmForeachContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(bhlParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForeachExpContext foreachExp() {
			return GetRuleContext<ForeachExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmForeachContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmForeach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmForeach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmForeach(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmYieldCallContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(bhlParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpContext chainExp() {
			return GetRuleContext<ChainExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StmYieldCallContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmYieldCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmYieldCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmYieldCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmYieldWhileContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(bhlParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(bhlParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		public StmYieldWhileContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmYieldWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmYieldWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmYieldWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmParalAllContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAL_ALL() { return GetToken(bhlParser.PARAL_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmParalAllContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmParalAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmParalAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmParalAll(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmBreakContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(bhlParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StmBreakContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				_localctx = new StmSeparatorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 359;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new StmDeclOptAssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 360;
				varDeclareList();
				State = 363;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 361;
					if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
					State = 362;
					assignExp();
					}
					break;
				}
				State = 365;
				eos();
				}
				break;
			case 3:
				_localctx = new StmDeclOrExpAssignContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 367;
				varDeclaresOrChainExps();
				State = 368;
				assignExp();
				State = 369;
				eos();
				}
				break;
			case 4:
				_localctx = new StmYieldContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 371;
				Match(YIELD);
				State = 372;
				Match(OPEN_PAREN);
				State = 373;
				Match(CLOSE_PAREN);
				State = 374;
				eos();
				}
				break;
			case 5:
				_localctx = new StmYieldCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 375;
				Match(YIELD);
				State = 376;
				chainExp();
				State = 377;
				eos();
				}
				break;
			case 6:
				_localctx = new StmYieldWhileContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 379;
				Match(YIELD);
				State = 380;
				Match(WHILE);
				State = 381;
				Match(OPEN_PAREN);
				State = 382;
				exp(0);
				State = 383;
				Match(CLOSE_PAREN);
				}
				break;
			case 7:
				_localctx = new StmChainExpContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 385;
				chainExp();
				State = 387;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 386;
					modifyOp();
					}
					break;
				}
				State = 389;
				eos();
				}
				break;
			case 8:
				_localctx = new StmIfContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 391;
				Match(IF);
				State = 392;
				Match(OPEN_PAREN);
				State = 393;
				exp(0);
				State = 394;
				Match(CLOSE_PAREN);
				State = 395;
				block();
				State = 399;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 396;
						elseIf();
						}
						} 
					}
					State = 401;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 402;
					@else();
					}
				}

				}
				break;
			case 9:
				_localctx = new StmWhileContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 405;
				Match(WHILE);
				State = 406;
				Match(OPEN_PAREN);
				State = 407;
				exp(0);
				State = 408;
				Match(CLOSE_PAREN);
				State = 409;
				block();
				}
				break;
			case 10:
				_localctx = new StmDoWhileContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 411;
				Match(DO);
				State = 412;
				block();
				State = 413;
				Match(WHILE);
				State = 414;
				Match(OPEN_PAREN);
				State = 415;
				exp(0);
				State = 416;
				Match(CLOSE_PAREN);
				State = 417;
				eos();
				}
				break;
			case 11:
				_localctx = new StmForContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 419;
				Match(FOR);
				State = 420;
				forExp();
				State = 421;
				block();
				}
				break;
			case 12:
				_localctx = new StmForeachContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 423;
				Match(FOREACH);
				State = 424;
				foreachExp();
				State = 425;
				block();
				}
				break;
			case 13:
				_localctx = new StmBreakContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 427;
				Match(BREAK);
				State = 428;
				eos();
				}
				break;
			case 14:
				_localctx = new StmContinueContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 429;
				Match(CONTINUE);
				State = 430;
				eos();
				}
				break;
			case 15:
				_localctx = new StmReturnContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 431;
				Match(RETURN);
				State = 434;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 432;
					if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
					State = 433;
					expList();
					}
					break;
				}
				State = 436;
				eos();
				}
				break;
			case 16:
				_localctx = new StmParalContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 437;
				Match(PARAL);
				State = 438;
				block();
				}
				break;
			case 17:
				_localctx = new StmParalAllContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 439;
				Match(PARAL_ALL);
				State = 440;
				block();
				}
				break;
			case 18:
				_localctx = new StmDeferContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 441;
				Match(DEFER);
				State = 442;
				block();
				}
				break;
			case 19:
				_localctx = new StmBlockNestedContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 443;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(bhlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(bhlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterElseIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitElseIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfContext elseIf() {
		ElseIfContext _localctx = new ElseIfContext(Context, State);
		EnterRule(_localctx, 38, RULE_elseIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			Match(ELSE);
			State = 447;
			Match(IF);
			State = 448;
			Match(OPEN_PAREN);
			State = 449;
			exp(0);
			State = 450;
			Match(CLOSE_PAREN);
			State = 451;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(bhlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(Context, State);
		EnterRule(_localctx, 40, RULE_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(ELSE);
			State = 454;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainExpItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallArgsContext callArgs() {
			return GetRuleContext<CallArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrAccessContext arrAccess() {
			return GetRuleContext<ArrAccessContext>(0);
		}
		public ChainExpItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainExpItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterChainExpItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitChainExpItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainExpItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainExpItemContext chainExpItem() {
		ChainExpItemContext _localctx = new ChainExpItemContext(Context, State);
		EnterRule(_localctx, 42, RULE_chainExpItem);
		try {
			State = 459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 456;
				callArgs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 457;
				memberAccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 458;
				arrAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(bhlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(bhlParser.CLOSE_BRACKET, 0); }
		public ArrAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterArrAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitArrAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrAccessContext arrAccess() {
		ArrAccessContext _localctx = new ArrAccessContext(Context, State);
		EnterRule(_localctx, 44, RULE_arrAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 461;
			if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
			State = 462;
			Match(OPEN_BRACKET);
			State = 463;
			exp(0);
			State = 464;
			Match(CLOSE_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(bhlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public MemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessContext memberAccess() {
		MemberAccessContext _localctx = new MemberAccessContext(Context, State);
		EnterRule(_localctx, 46, RULE_memberAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(DOT);
			State = 467;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallArgsListContext callArgsList() {
			return GetRuleContext<CallArgsListContext>(0);
		}
		public CallArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterCallArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitCallArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallArgsContext callArgs() {
		CallArgsContext _localctx = new CallArgsContext(Context, State);
		EnterRule(_localctx, 48, RULE_callArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			Match(OPEN_PAREN);
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8663799775636979684L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 965L) != 0)) {
				{
				State = 470;
				callArgsList();
				}
			}

			State = 473;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallArgContext[] callArg() {
			return GetRuleContexts<CallArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallArgContext callArg(int i) {
			return GetRuleContext<CallArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public CallArgsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArgsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterCallArgsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitCallArgsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallArgsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallArgsListContext callArgsList() {
		CallArgsListContext _localctx = new CallArgsListContext(Context, State);
		EnterRule(_localctx, 50, RULE_callArgsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			callArg();
			State = 480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 476;
				Match(COMMA);
				State = 477;
				callArg();
				}
				}
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(bhlParser.VARIADIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(bhlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(bhlParser.REF, 0); }
		public CallArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterCallArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitCallArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallArgContext callArg() {
		CallArgContext _localctx = new CallArgContext(Context, State);
		EnterRule(_localctx, 52, RULE_callArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIADIC) {
				{
				State = 483;
				Match(VARIADIC);
				}
			}

			State = 488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 486;
				Match(NAME);
				State = 487;
				Match(COLON);
				}
				break;
			}
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REF) {
				{
				State = 490;
				Match(REF);
				}
			}

			State = 493;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(bhlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(bhlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 54, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(OPEN_BRACE);
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 6096747995653703613L) != 0)) {
				{
				{
				State = 496;
				statement();
				}
				}
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 502;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(bhlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NsNameContext[] nsName() {
			return GetRuleContexts<NsNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NsNameContext nsName(int i) {
			return GetRuleContext<NsNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public ExtensionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExtensions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExtensions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionsContext extensions() {
		ExtensionsContext _localctx = new ExtensionsContext(Context, State);
		EnterRule(_localctx, 56, RULE_extensions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(COLON);
			State = 505;
			nsName();
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 506;
				Match(COMMA);
				State = 507;
				nsName();
				}
				}
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NsDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(bhlParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DotNameContext dotName() {
			return GetRuleContext<DotNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(bhlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(bhlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public NsDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nsDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterNsDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitNsDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNsDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NsDeclContext nsDecl() {
		NsDeclContext _localctx = new NsDeclContext(Context, State);
		EnterRule(_localctx, 58, RULE_nsDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			Match(NAMESPACE);
			State = 514;
			dotName();
			State = 515;
			Match(OPEN_BRACE);
			State = 519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8971170453435449344L) != 0)) {
				{
				{
				State = 516;
				decl();
				}
				}
				State = 521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 522;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(bhlParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBlockContext classBlock() {
			return GetRuleContext<ClassBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionsContext extensions() {
			return GetRuleContext<ExtensionsContext>(0);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 60, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			Match(CLASS);
			State = 525;
			Match(NAME);
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 526;
				extensions();
				}
			}

			State = 529;
			classBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(bhlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassMembersContext classMembers() {
			return GetRuleContext<ClassMembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(bhlParser.CLOSE_BRACE, 0); }
		public ClassBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterClassBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitClassBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBlockContext classBlock() {
		ClassBlockContext _localctx = new ClassBlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_classBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(OPEN_BRACE);
			State = 532;
			classMembers();
			State = 533;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberContext[] classMember() {
			return GetRuleContexts<ClassMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberContext classMember(int i) {
			return GetRuleContext<ClassMemberContext>(i);
		}
		public ClassMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMembers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterClassMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitClassMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMembers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMembersContext classMembers() {
		ClassMembersContext _localctx = new ClassMembersContext(Context, State);
		EnterRule(_localctx, 64, RULE_classMembers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8971170453443837952L) != 0)) {
				{
				{
				State = 535;
				classMember();
				}
				}
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FldAttribsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(bhlParser.STATIC, 0); }
		public FldAttribsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fldAttribs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFldAttribs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFldAttribs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFldAttribs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FldAttribsContext fldAttribs() {
		FldAttribsContext _localctx = new FldAttribsContext(Context, State);
		EnterRule(_localctx, 66, RULE_fldAttribs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			Match(STATIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FldDeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareContext varDeclare() {
			return GetRuleContext<VarDeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FldAttribsContext[] fldAttribs() {
			return GetRuleContexts<FldAttribsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FldAttribsContext fldAttribs(int i) {
			return GetRuleContext<FldAttribsContext>(i);
		}
		public FldDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fldDeclare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFldDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFldDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFldDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FldDeclareContext fldDeclare() {
		FldDeclareContext _localctx = new FldDeclareContext(Context, State);
		EnterRule(_localctx, 68, RULE_fldDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STATIC) {
				{
				{
				State = 543;
				fldAttribs();
				}
				}
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 549;
			varDeclare();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FldDeclareContext fldDeclare() {
			return GetRuleContext<FldDeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl() {
			return GetRuleContext<FuncDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclContext enumDecl() {
			return GetRuleContext<EnumDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclContext interfaceDecl() {
			return GetRuleContext<InterfaceDeclContext>(0);
		}
		public ClassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterClassMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitClassMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberContext classMember() {
		ClassMemberContext _localctx = new ClassMemberContext(Context, State);
		EnterRule(_localctx, 70, RULE_classMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 551;
				fldDeclare();
				}
				break;
			case 2:
				{
				State = 552;
				funcDecl();
				}
				break;
			case 3:
				{
				State = 553;
				classDecl();
				}
				break;
			case 4:
				{
				State = 554;
				enumDecl();
				}
				break;
			case 5:
				{
				State = 555;
				interfaceDecl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(bhlParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBlockContext interfaceBlock() {
			return GetRuleContext<InterfaceBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionsContext extensions() {
			return GetRuleContext<ExtensionsContext>(0);
		}
		public InterfaceDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclContext interfaceDecl() {
		InterfaceDeclContext _localctx = new InterfaceDeclContext(Context, State);
		EnterRule(_localctx, 72, RULE_interfaceDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			Match(INTERFACE);
			State = 559;
			Match(NAME);
			State = 561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 560;
				extensions();
				}
			}

			State = 563;
			interfaceBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(bhlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMembersContext interfaceMembers() {
			return GetRuleContext<InterfaceMembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(bhlParser.CLOSE_BRACE, 0); }
		public InterfaceBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBlockContext interfaceBlock() {
		InterfaceBlockContext _localctx = new InterfaceBlockContext(Context, State);
		EnterRule(_localctx, 74, RULE_interfaceBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(OPEN_BRACE);
			State = 566;
			interfaceMembers();
			State = 567;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMemberContext[] interfaceMember() {
			return GetRuleContexts<InterfaceMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMemberContext interfaceMember(int i) {
			return GetRuleContext<InterfaceMemberContext>(i);
		}
		public InterfaceMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMembers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMembers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMembersContext interfaceMembers() {
		InterfaceMembersContext _localctx = new InterfaceMembersContext(Context, State);
		EnterRule(_localctx, 76, RULE_interfaceMembers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CORO || _la==FUNC) {
				{
				{
				State = 569;
				interfaceMember();
				}
				}
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceFuncDeclContext interfaceFuncDecl() {
			return GetRuleContext<InterfaceFuncDeclContext>(0);
		}
		public InterfaceMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberContext interfaceMember() {
		InterfaceMemberContext _localctx = new InterfaceMemberContext(Context, State);
		EnterRule(_localctx, 78, RULE_interfaceMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			interfaceFuncDecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(bhlParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBlockContext enumBlock() {
			return GetRuleContext<EnumBlockContext>(0);
		}
		public EnumDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterEnumDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitEnumDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclContext enumDecl() {
		EnumDeclContext _localctx = new EnumDeclContext(Context, State);
		EnterRule(_localctx, 80, RULE_enumDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(ENUM);
			State = 578;
			Match(NAME);
			State = 579;
			enumBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(bhlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(bhlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		public EnumBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterEnumBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitEnumBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBlockContext enumBlock() {
		EnumBlockContext _localctx = new EnumBlockContext(Context, State);
		EnterRule(_localctx, 82, RULE_enumBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			Match(OPEN_BRACE);
			State = 583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 582;
				enumMember();
				}
				}
				State = 585;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 587;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(bhlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(bhlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(bhlParser.MINUS, 0); }
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterEnumMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitEnumMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(Context, State);
		EnterRule(_localctx, 84, RULE_enumMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(NAME);
			State = 590;
			Match(ASSIGN);
			State = 592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 591;
				Match(MINUS);
				}
			}

			State = 594;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncAttribsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORO() { return GetToken(bhlParser.CORO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(bhlParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(bhlParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(bhlParser.STATIC, 0); }
		public FuncAttribsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcAttribs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFuncAttribs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFuncAttribs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncAttribs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncAttribsContext funcAttribs() {
		FuncAttribsContext _localctx = new FuncAttribsContext(Context, State);
		EnterRule(_localctx, 86, RULE_funcAttribs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2013265920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(bhlParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncBlockContext funcBlock() {
			return GetRuleContext<FuncBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncAttribsContext[] funcAttribs() {
			return GetRuleContexts<FuncAttribsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncAttribsContext funcAttribs(int i) {
			return GetRuleContext<FuncAttribsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetTypeContext retType() {
			return GetRuleContext<RetTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamsContext funcParams() {
			return GetRuleContext<FuncParamsContext>(0);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 88, RULE_funcDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2013265920L) != 0)) {
				{
				{
				State = 598;
				funcAttribs();
				}
				}
				State = 603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 604;
			Match(FUNC);
			State = 606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 605;
				retType();
				}
				break;
			}
			State = 608;
			Match(NAME);
			State = 609;
			Match(OPEN_PAREN);
			State = 611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8682940074054123520L) != 0)) {
				{
				State = 610;
				funcParams();
				}
			}

			State = 613;
			Match(CLOSE_PAREN);
			State = 614;
			funcBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(bhlParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORO() { return GetToken(bhlParser.CORO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RetTypeContext retType() {
			return GetRuleContext<RetTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypesContext types() {
			return GetRuleContext<TypesContext>(0);
		}
		public FuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFuncType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFuncType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeContext funcType() {
		FuncTypeContext _localctx = new FuncTypeContext(Context, State);
		EnterRule(_localctx, 90, RULE_funcType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CORO) {
				{
				State = 616;
				Match(CORO);
				}
			}

			State = 619;
			Match(FUNC);
			State = 621;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8971170454500802560L) != 0)) {
				{
				State = 620;
				retType();
				}
			}

			State = 623;
			Match(OPEN_PAREN);
			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8971170450205835264L) != 0)) {
				{
				State = 624;
				types();
				}
			}

			State = 627;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FuncBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFuncBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFuncBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncBlockContext funcBlock() {
		FuncBlockContext _localctx = new FuncBlockContext(Context, State);
		EnterRule(_localctx, 92, RULE_funcBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceFuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(bhlParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORO() { return GetToken(bhlParser.CORO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RetTypeContext retType() {
			return GetRuleContext<RetTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamsContext funcParams() {
			return GetRuleContext<FuncParamsContext>(0);
		}
		public InterfaceFuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceFuncDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterInterfaceFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitInterfaceFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceFuncDeclContext interfaceFuncDecl() {
		InterfaceFuncDeclContext _localctx = new InterfaceFuncDeclContext(Context, State);
		EnterRule(_localctx, 94, RULE_interfaceFuncDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CORO) {
				{
				State = 631;
				Match(CORO);
				}
			}

			State = 634;
			Match(FUNC);
			State = 636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 635;
				retType();
				}
				break;
			}
			State = 638;
			Match(NAME);
			State = 639;
			Match(OPEN_PAREN);
			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8682940074054123520L) != 0)) {
				{
				State = 640;
				funcParams();
				}
			}

			State = 643;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncLambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(bhlParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncBlockContext funcBlock() {
			return GetRuleContext<FuncBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORO() { return GetToken(bhlParser.CORO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RetTypeContext retType() {
			return GetRuleContext<RetTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamsContext funcParams() {
			return GetRuleContext<FuncParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaptureListContext captureList() {
			return GetRuleContext<CaptureListContext>(0);
		}
		public FuncLambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcLambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFuncLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFuncLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncLambdaContext funcLambda() {
		FuncLambdaContext _localctx = new FuncLambdaContext(Context, State);
		EnterRule(_localctx, 96, RULE_funcLambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CORO) {
				{
				State = 645;
				Match(CORO);
				}
			}

			State = 648;
			Match(FUNC);
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8971170454500802560L) != 0)) {
				{
				State = 649;
				retType();
				}
			}

			State = 652;
			Match(OPEN_PAREN);
			State = 654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8682940074054123520L) != 0)) {
				{
				State = 653;
				funcParams();
				}
			}

			State = 656;
			Match(CLOSE_PAREN);
			State = 658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 657;
				captureList();
				}
			}

			State = 660;
			funcBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(bhlParser.REF, 0); }
		public RefTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterRefType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitRefType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefTypeContext refType() {
		RefTypeContext _localctx = new RefTypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_refType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REF) {
				{
				State = 662;
				Match(REF);
				}
			}

			State = 665;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public RetTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterRetType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitRetType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetTypeContext retType() {
		RetTypeContext _localctx = new RetTypeContext(Context, State);
		EnterRule(_localctx, 100, RULE_retType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			type();
			State = 672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 668;
				Match(COMMA);
				State = 669;
				type();
				}
				}
				State = 674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(bhlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(bhlParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(bhlParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(bhlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public CaptureListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_captureList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterCaptureList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitCaptureList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaptureList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaptureListContext captureList() {
		CaptureListContext _localctx = new CaptureListContext(Context, State);
		EnterRule(_localctx, 102, RULE_captureList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			Match(OPEN_BRACKET);
			State = 676;
			Match(NAME);
			State = 681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 677;
				Match(COMMA);
				State = 678;
				Match(NAME);
				}
				}
				State = 683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 684;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeContext[] refType() {
			return GetRuleContexts<RefTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeContext refType(int i) {
			return GetRuleContext<RefTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public TypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_types; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypesContext types() {
		TypesContext _localctx = new TypesContext(Context, State);
		EnterRule(_localctx, 104, RULE_types);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			refType();
			State = 691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 687;
				Match(COMMA);
				State = 688;
				refType();
				}
				}
				State = 693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamDeclareContext[] funcParamDeclare() {
			return GetRuleContexts<FuncParamDeclareContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamDeclareContext funcParamDeclare(int i) {
			return GetRuleContext<FuncParamDeclareContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public FuncParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFuncParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFuncParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamsContext funcParams() {
		FuncParamsContext _localctx = new FuncParamsContext(Context, State);
		EnterRule(_localctx, 106, RULE_funcParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			funcParamDeclare();
			State = 699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 695;
				Match(COMMA);
				State = 696;
				funcParamDeclare();
				}
				}
				State = 701;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamDeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(bhlParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(bhlParser.VARIADIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		public FuncParamDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParamDeclare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFuncParamDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFuncParamDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParamDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamDeclareContext funcParamDeclare() {
		FuncParamDeclareContext _localctx = new FuncParamDeclareContext(Context, State);
		EnterRule(_localctx, 108, RULE_funcParamDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REF) {
				{
				State = 702;
				Match(REF);
				}
			}

			State = 706;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIADIC) {
				{
				State = 705;
				Match(VARIADIC);
				}
			}

			State = 708;
			type();
			State = 709;
			Match(NAME);
			State = 711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 710;
				assignExp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public VarDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterVarDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitVarDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclareContext varDeclare() {
		VarDeclareContext _localctx = new VarDeclareContext(Context, State);
		EnterRule(_localctx, 110, RULE_varDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			type();
			State = 714;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclareListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareContext[] varDeclare() {
			return GetRuleContexts<VarDeclareContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareContext varDeclare(int i) {
			return GetRuleContext<VarDeclareContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public VarDeclareListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclareList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterVarDeclareList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitVarDeclareList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclareList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclareListContext varDeclareList() {
		VarDeclareListContext _localctx = new VarDeclareListContext(Context, State);
		EnterRule(_localctx, 112, RULE_varDeclareList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			varDeclare();
			State = 721;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 717;
					Match(COMMA);
					State = 718;
					varDeclare();
					}
					} 
				}
				State = 723;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclareOptAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareContext varDeclare() {
			return GetRuleContext<VarDeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(bhlParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		public VarDeclareOptAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclareOptAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterVarDeclareOptAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitVarDeclareOptAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclareOptAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclareOptAssignContext varDeclareOptAssign() {
		VarDeclareOptAssignContext _localctx = new VarDeclareOptAssignContext(Context, State);
		EnterRule(_localctx, 114, RULE_varDeclareOptAssign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATIC) {
				{
				State = 724;
				Match(STATIC);
				}
			}

			State = 727;
			varDeclare();
			State = 729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 728;
				assignExp();
				}
				break;
			}
			State = 731;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrDeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareContext varDeclare() {
			return GetRuleContext<VarDeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public VarOrDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrDeclare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterVarOrDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitVarOrDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrDeclareContext varOrDeclare() {
		VarOrDeclareContext _localctx = new VarOrDeclareContext(Context, State);
		EnterRule(_localctx, 116, RULE_varOrDeclare);
		try {
			State = 735;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 733;
				varDeclare();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 734;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrDeclareAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrDeclareContext varOrDeclare() {
			return GetRuleContext<VarOrDeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		public VarOrDeclareAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrDeclareAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterVarOrDeclareAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitVarOrDeclareAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrDeclareAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrDeclareAssignContext varOrDeclareAssign() {
		VarOrDeclareAssignContext _localctx = new VarOrDeclareAssignContext(Context, State);
		EnterRule(_localctx, 118, RULE_varOrDeclareAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			varOrDeclare();
			State = 738;
			assignExp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclareOrChainExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareContext varDeclare() {
			return GetRuleContext<VarDeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpContext chainExp() {
			return GetRuleContext<ChainExpContext>(0);
		}
		public VarDeclareOrChainExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclareOrChainExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterVarDeclareOrChainExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitVarDeclareOrChainExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclareOrChainExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclareOrChainExpContext varDeclareOrChainExp() {
		VarDeclareOrChainExpContext _localctx = new VarDeclareOrChainExpContext(Context, State);
		EnterRule(_localctx, 120, RULE_varDeclareOrChainExp);
		try {
			State = 742;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 740;
				varDeclare();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 741;
				chainExp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclaresOrChainExpsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareOrChainExpContext[] varDeclareOrChainExp() {
			return GetRuleContexts<VarDeclareOrChainExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareOrChainExpContext varDeclareOrChainExp(int i) {
			return GetRuleContext<VarDeclareOrChainExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public VarDeclaresOrChainExpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaresOrChainExps; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterVarDeclaresOrChainExps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitVarDeclaresOrChainExps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclaresOrChainExps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclaresOrChainExpsContext varDeclaresOrChainExps() {
		VarDeclaresOrChainExpsContext _localctx = new VarDeclaresOrChainExpsContext(Context, State);
		EnterRule(_localctx, 122, RULE_varDeclaresOrChainExps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			varDeclareOrChainExp();
			State = 749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 745;
				Match(COMMA);
				State = 746;
				varDeclareOrChainExp();
				}
				}
				State = 751;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifyOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorIncDecContext operatorIncDec() {
			return GetRuleContext<OperatorIncDecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorSelfOpContext operatorSelfOp() {
			return GetRuleContext<OperatorSelfOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ModifyOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifyOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterModifyOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitModifyOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifyOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifyOpContext modifyOp() {
		ModifyOpContext _localctx = new ModifyOpContext(Context, State);
		EnterRule(_localctx, 124, RULE_modifyOp);
		try {
			State = 757;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 752;
				assignExp();
				}
				break;
			case INC:
			case DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 753;
				operatorIncDec();
				}
				break;
			case SINC:
			case SDEC:
			case SMUL:
			case SDIV:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 754;
				operatorSelfOp();
				State = 755;
				exp(0);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpModifyOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpContext chainExp() {
			return GetRuleContext<ChainExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifyOpContext modifyOp() {
			return GetRuleContext<ModifyOpContext>(0);
		}
		public ExpModifyOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expModifyOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpModifyOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpModifyOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpModifyOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpModifyOpContext expModifyOp() {
		ExpModifyOpContext _localctx = new ExpModifyOpContext(Context, State);
		EnterRule(_localctx, 126, RULE_expModifyOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759;
			chainExp();
			State = 760;
			modifyOp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(bhlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public AssignExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterAssignExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitAssignExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignExpContext assignExp() {
		AssignExpContext _localctx = new AssignExpContext(Context, State);
		EnterRule(_localctx, 128, RULE_assignExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 762;
			Match(ASSIGN);
			State = 763;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOR() { return GetToken(bhlParser.BOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAND() { return GetToken(bhlParser.BAND, 0); }
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(Context, State);
		EnterRule(_localctx, 130, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			_la = TokenStream.LA(1);
			if ( !(_la==BOR || _la==BAND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorIncDecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(bhlParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(bhlParser.DEC, 0); }
		public OperatorIncDecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorIncDec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterOperatorIncDec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitOperatorIncDec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorIncDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorIncDecContext operatorIncDec() {
		OperatorIncDecContext _localctx = new OperatorIncDecContext(Context, State);
		EnterRule(_localctx, 132, RULE_operatorIncDec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			_la = TokenStream.LA(1);
			if ( !(_la==INC || _la==DEC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorSelfOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINC() { return GetToken(bhlParser.SINC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SDEC() { return GetToken(bhlParser.SDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMUL() { return GetToken(bhlParser.SMUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SDIV() { return GetToken(bhlParser.SDIV, 0); }
		public OperatorSelfOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorSelfOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterOperatorSelfOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitOperatorSelfOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorSelfOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorSelfOpContext operatorSelfOp() {
		OperatorSelfOpContext _localctx = new OperatorSelfOpContext(Context, State);
		EnterRule(_localctx, 134, RULE_operatorSelfOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8246337208320L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(bhlParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(bhlParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(bhlParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(bhlParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(bhlParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(bhlParser.EQ, 0); }
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(Context, State);
		EnterRule(_localctx, 136, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 554153860399104L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(bhlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(bhlParser.MINUS, 0); }
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
		EnterRule(_localctx, 138, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(bhlParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(bhlParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(bhlParser.MOD, 0); }
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(Context, State);
		EnterRule(_localctx, 140, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15762598695796736L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(bhlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(bhlParser.MINUS, 0); }
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(Context, State);
		EnterRule(_localctx, 142, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 777;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(bhlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(bhlParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(bhlParser.FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 144, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALSTRING() { return GetToken(bhlParser.NORMALSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 146, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			Match(NORMALSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(bhlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonPairContext[] jsonPair() {
			return GetRuleContexts<JsonPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonPairContext jsonPair(int i) {
			return GetRuleContext<JsonPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(bhlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonEmptyObjContext jsonEmptyObj() {
			return GetRuleContext<JsonEmptyObjContext>(0);
		}
		public JsonObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterJsonObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitJsonObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonObjectContext jsonObject() {
		JsonObjectContext _localctx = new JsonObjectContext(Context, State);
		EnterRule(_localctx, 148, RULE_jsonObject);
		int _la;
		try {
			State = 795;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 783;
				Match(OPEN_BRACE);
				State = 784;
				jsonPair();
				State = 789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 785;
					Match(COMMA);
					State = 786;
					jsonPair();
					}
					}
					State = 791;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 792;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 794;
				jsonEmptyObj();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonEmptyObjContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(bhlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(bhlParser.CLOSE_BRACE, 0); }
		public JsonEmptyObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonEmptyObj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterJsonEmptyObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitJsonEmptyObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonEmptyObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonEmptyObjContext jsonEmptyObj() {
		JsonEmptyObjContext _localctx = new JsonEmptyObjContext(Context, State);
		EnterRule(_localctx, 150, RULE_jsonEmptyObj);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			Match(OPEN_BRACE);
			State = 798;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(bhlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public JsonPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterJsonPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitJsonPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonPairContext jsonPair() {
		JsonPairContext _localctx = new JsonPairContext(Context, State);
		EnterRule(_localctx, 152, RULE_jsonPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			Match(NAME);
			State = 801;
			Match(COLON);
			State = 802;
			jsonValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(bhlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueContext[] jsonValue() {
			return GetRuleContexts<JsonValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueContext jsonValue(int i) {
			return GetRuleContext<JsonValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(bhlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonEmptyArrContext jsonEmptyArr() {
			return GetRuleContext<JsonEmptyArrContext>(0);
		}
		public JsonArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterJsonArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitJsonArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonArrayContext jsonArray() {
		JsonArrayContext _localctx = new JsonArrayContext(Context, State);
		EnterRule(_localctx, 154, RULE_jsonArray);
		int _la;
		try {
			State = 816;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 804;
				Match(OPEN_BRACKET);
				State = 805;
				jsonValue();
				State = 810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 806;
					Match(COMMA);
					State = 807;
					jsonValue();
					}
					}
					State = 812;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 813;
				Match(CLOSE_BRACKET);
				}
				break;
			case ARR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 815;
				jsonEmptyArr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonEmptyArrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARR() { return GetToken(bhlParser.ARR, 0); }
		public JsonEmptyArrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonEmptyArr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterJsonEmptyArr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitJsonEmptyArr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonEmptyArr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonEmptyArrContext jsonEmptyArr() {
		JsonEmptyArrContext _localctx = new JsonEmptyArrContext(Context, State);
		EnterRule(_localctx, 156, RULE_jsonEmptyArr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			Match(ARR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public JsonValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterJsonValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitJsonValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueContext jsonValue() {
		JsonValueContext _localctx = new JsonValueContext(Context, State);
		EnterRule(_localctx, 158, RULE_jsonValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(bhlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(bhlParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 160, RULE_eos);
		try {
			State = 826;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 822;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 823;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 824;
				if (!(this.lineTerminator())) throw new FailedPredicateException(this, "this.lineTerminator()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 825;
				if (!(this.closeBrace())) throw new FailedPredicateException(this, "this.closeBrace()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return exp_sempred((ExpContext)_localctx, predIndex);
		case 13: return newExp_sempred((NewExpContext)_localctx, predIndex);
		case 18: return statement_sempred((StatementContext)_localctx, predIndex);
		case 22: return arrAccess_sempred((ArrAccessContext)_localctx, predIndex);
		case 80: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 2);
		}
		return true;
	}
	private bool newExp_sempred(NewExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return this.notLineTerminator();
		}
		return true;
	}
	private bool statement_sempred(StatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return this.notLineTerminator();
		case 11: return this.notLineTerminator();
		}
		return true;
	}
	private bool arrAccess_sempred(ArrAccessContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return this.notLineTerminator();
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return this.lineTerminator();
		case 14: return this.closeBrace();
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,78,829,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,1,0,5,0,164,8,0,10,0,12,0,167,9,0,1,0,1,
		0,1,1,1,1,3,1,173,8,1,1,2,1,2,1,2,5,2,178,8,2,10,2,12,2,181,9,2,1,3,1,
		3,1,3,1,3,1,3,1,3,3,3,189,8,3,1,4,1,4,5,4,193,8,4,10,4,12,4,196,9,4,1,
		5,3,5,199,8,5,1,5,1,5,1,6,1,6,3,6,205,8,6,1,6,1,6,3,6,209,8,6,1,7,1,7,
		1,7,1,7,1,8,1,8,1,8,5,8,218,8,8,10,8,12,8,221,9,8,1,9,3,9,224,8,9,1,9,
		1,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,234,8,10,1,10,5,10,237,8,10,10,
		10,12,10,240,9,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,3,11,268,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,5,11,300,8,11,10,11,12,11,303,9,11,1,12,
		1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,3,13,315,8,13,3,13,317,8,
		13,1,14,1,14,1,14,1,14,5,14,323,8,14,10,14,12,14,326,9,14,1,14,1,14,1,
		14,1,14,1,15,1,15,1,15,5,15,335,8,15,10,15,12,15,338,9,15,1,16,1,16,1,
		16,5,16,343,8,16,10,16,12,16,346,9,16,1,17,1,17,3,17,350,8,17,1,17,1,17,
		1,17,1,17,3,17,356,8,17,1,17,1,17,1,18,1,18,1,18,1,18,3,18,364,8,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,388,8,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,5,18,398,8,18,10,18,12,18,401,9,18,1,18,3,18,404,8,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,3,18,435,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,445,
		8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,
		3,21,460,8,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,3,24,472,
		8,24,1,24,1,24,1,25,1,25,1,25,5,25,479,8,25,10,25,12,25,482,9,25,1,26,
		3,26,485,8,26,1,26,1,26,3,26,489,8,26,1,26,3,26,492,8,26,1,26,1,26,1,27,
		1,27,5,27,498,8,27,10,27,12,27,501,9,27,1,27,1,27,1,28,1,28,1,28,1,28,
		5,28,509,8,28,10,28,12,28,512,9,28,1,29,1,29,1,29,1,29,5,29,518,8,29,10,
		29,12,29,521,9,29,1,29,1,29,1,30,1,30,1,30,3,30,528,8,30,1,30,1,30,1,31,
		1,31,1,31,1,31,1,32,5,32,537,8,32,10,32,12,32,540,9,32,1,33,1,33,1,34,
		5,34,545,8,34,10,34,12,34,548,9,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,
		3,35,557,8,35,1,36,1,36,1,36,3,36,562,8,36,1,36,1,36,1,37,1,37,1,37,1,
		37,1,38,5,38,571,8,38,10,38,12,38,574,9,38,1,39,1,39,1,40,1,40,1,40,1,
		40,1,41,1,41,4,41,584,8,41,11,41,12,41,585,1,41,1,41,1,42,1,42,1,42,3,
		42,593,8,42,1,42,1,42,1,43,1,43,1,44,5,44,600,8,44,10,44,12,44,603,9,44,
		1,44,1,44,3,44,607,8,44,1,44,1,44,1,44,3,44,612,8,44,1,44,1,44,1,44,1,
		45,3,45,618,8,45,1,45,1,45,3,45,622,8,45,1,45,1,45,3,45,626,8,45,1,45,
		1,45,1,46,1,46,1,47,3,47,633,8,47,1,47,1,47,3,47,637,8,47,1,47,1,47,1,
		47,3,47,642,8,47,1,47,1,47,1,48,3,48,647,8,48,1,48,1,48,3,48,651,8,48,
		1,48,1,48,3,48,655,8,48,1,48,1,48,3,48,659,8,48,1,48,1,48,1,49,3,49,664,
		8,49,1,49,1,49,1,50,1,50,1,50,5,50,671,8,50,10,50,12,50,674,9,50,1,51,
		1,51,1,51,1,51,5,51,680,8,51,10,51,12,51,683,9,51,1,51,1,51,1,52,1,52,
		1,52,5,52,690,8,52,10,52,12,52,693,9,52,1,53,1,53,1,53,5,53,698,8,53,10,
		53,12,53,701,9,53,1,54,3,54,704,8,54,1,54,3,54,707,8,54,1,54,1,54,1,54,
		3,54,712,8,54,1,55,1,55,1,55,1,56,1,56,1,56,5,56,720,8,56,10,56,12,56,
		723,9,56,1,57,3,57,726,8,57,1,57,1,57,3,57,730,8,57,1,57,1,57,1,58,1,58,
		3,58,736,8,58,1,59,1,59,1,59,1,60,1,60,3,60,743,8,60,1,61,1,61,1,61,5,
		61,748,8,61,10,61,12,61,751,9,61,1,62,1,62,1,62,1,62,1,62,3,62,758,8,62,
		1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,
		1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,74,1,74,
		5,74,788,8,74,10,74,12,74,791,9,74,1,74,1,74,1,74,3,74,796,8,74,1,75,1,
		75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,5,77,809,8,77,10,77,12,
		77,812,9,77,1,77,1,77,1,77,3,77,817,8,77,1,78,1,78,1,79,1,79,1,80,1,80,
		1,80,1,80,3,80,827,8,80,1,80,0,1,22,81,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
		72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
		150,152,154,156,158,160,0,9,1,0,27,30,1,0,35,36,1,0,37,38,1,0,39,42,1,
		0,43,48,1,0,49,50,1,0,51,53,2,0,50,50,54,54,1,0,72,74,874,0,165,1,0,0,
		0,2,172,1,0,0,0,4,174,1,0,0,0,6,188,1,0,0,0,8,190,1,0,0,0,10,198,1,0,0,
		0,12,204,1,0,0,0,14,210,1,0,0,0,16,214,1,0,0,0,18,223,1,0,0,0,20,233,1,
		0,0,0,22,267,1,0,0,0,24,304,1,0,0,0,26,309,1,0,0,0,28,318,1,0,0,0,30,331,
		1,0,0,0,32,339,1,0,0,0,34,347,1,0,0,0,36,444,1,0,0,0,38,446,1,0,0,0,40,
		453,1,0,0,0,42,459,1,0,0,0,44,461,1,0,0,0,46,466,1,0,0,0,48,469,1,0,0,
		0,50,475,1,0,0,0,52,484,1,0,0,0,54,495,1,0,0,0,56,504,1,0,0,0,58,513,1,
		0,0,0,60,524,1,0,0,0,62,531,1,0,0,0,64,538,1,0,0,0,66,541,1,0,0,0,68,546,
		1,0,0,0,70,556,1,0,0,0,72,558,1,0,0,0,74,565,1,0,0,0,76,572,1,0,0,0,78,
		575,1,0,0,0,80,577,1,0,0,0,82,581,1,0,0,0,84,589,1,0,0,0,86,596,1,0,0,
		0,88,601,1,0,0,0,90,617,1,0,0,0,92,629,1,0,0,0,94,632,1,0,0,0,96,646,1,
		0,0,0,98,663,1,0,0,0,100,667,1,0,0,0,102,675,1,0,0,0,104,686,1,0,0,0,106,
		694,1,0,0,0,108,703,1,0,0,0,110,713,1,0,0,0,112,716,1,0,0,0,114,725,1,
		0,0,0,116,735,1,0,0,0,118,737,1,0,0,0,120,742,1,0,0,0,122,744,1,0,0,0,
		124,757,1,0,0,0,126,759,1,0,0,0,128,762,1,0,0,0,130,765,1,0,0,0,132,767,
		1,0,0,0,134,769,1,0,0,0,136,771,1,0,0,0,138,773,1,0,0,0,140,775,1,0,0,
		0,142,777,1,0,0,0,144,779,1,0,0,0,146,781,1,0,0,0,148,795,1,0,0,0,150,
		797,1,0,0,0,152,800,1,0,0,0,154,816,1,0,0,0,156,818,1,0,0,0,158,820,1,
		0,0,0,160,826,1,0,0,0,162,164,3,2,1,0,163,162,1,0,0,0,164,167,1,0,0,0,
		165,163,1,0,0,0,165,166,1,0,0,0,166,168,1,0,0,0,167,165,1,0,0,0,168,169,
		5,0,0,1,169,1,1,0,0,0,170,173,3,6,3,0,171,173,3,4,2,0,172,170,1,0,0,0,
		172,171,1,0,0,0,173,3,1,0,0,0,174,175,5,1,0,0,175,179,5,71,0,0,176,178,
		5,60,0,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,
		0,180,5,1,0,0,0,181,179,1,0,0,0,182,189,3,58,29,0,183,189,3,60,30,0,184,
		189,3,72,36,0,185,189,3,88,44,0,186,189,3,114,57,0,187,189,3,80,40,0,188,
		182,1,0,0,0,188,183,1,0,0,0,188,184,1,0,0,0,188,185,1,0,0,0,188,186,1,
		0,0,0,188,187,1,0,0,0,189,7,1,0,0,0,190,194,5,55,0,0,191,193,3,46,23,0,
		192,191,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,9,
		1,0,0,0,196,194,1,0,0,0,197,199,5,57,0,0,198,197,1,0,0,0,198,199,1,0,0,
		0,199,200,1,0,0,0,200,201,3,8,4,0,201,11,1,0,0,0,202,205,5,56,0,0,203,
		205,3,14,7,0,204,202,1,0,0,0,204,203,1,0,0,0,204,205,1,0,0,0,205,208,1,
		0,0,0,206,209,3,10,5,0,207,209,3,90,45,0,208,206,1,0,0,0,208,207,1,0,0,
		0,209,13,1,0,0,0,210,211,5,63,0,0,211,212,3,10,5,0,212,213,5,64,0,0,213,
		15,1,0,0,0,214,219,3,22,11,0,215,216,5,69,0,0,216,218,3,22,11,0,217,215,
		1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,17,1,0,0,0,
		221,219,1,0,0,0,222,224,5,57,0,0,223,222,1,0,0,0,223,224,1,0,0,0,224,225,
		1,0,0,0,225,226,5,55,0,0,226,19,1,0,0,0,227,234,3,18,9,0,228,229,5,65,
		0,0,229,230,3,22,11,0,230,231,5,66,0,0,231,234,1,0,0,0,232,234,3,96,48,
		0,233,227,1,0,0,0,233,228,1,0,0,0,233,232,1,0,0,0,234,238,1,0,0,0,235,
		237,3,42,21,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,
		1,0,0,0,239,21,1,0,0,0,240,238,1,0,0,0,241,242,6,11,-1,0,242,268,5,2,0,
		0,243,268,5,3,0,0,244,268,5,4,0,0,245,268,3,144,72,0,246,268,3,146,73,
		0,247,248,5,65,0,0,248,249,3,12,6,0,249,250,5,66,0,0,250,251,3,22,11,18,
		251,268,1,0,0,0,252,268,3,20,10,0,253,268,3,96,48,0,254,255,5,18,0,0,255,
		256,5,65,0,0,256,257,3,12,6,0,257,258,5,66,0,0,258,268,1,0,0,0,259,268,
		3,148,74,0,260,268,3,154,77,0,261,262,5,15,0,0,262,268,3,20,10,0,263,264,
		3,142,71,0,264,265,3,22,11,9,265,268,1,0,0,0,266,268,3,26,13,0,267,241,
		1,0,0,0,267,243,1,0,0,0,267,244,1,0,0,0,267,245,1,0,0,0,267,246,1,0,0,
		0,267,247,1,0,0,0,267,252,1,0,0,0,267,253,1,0,0,0,267,254,1,0,0,0,267,
		259,1,0,0,0,267,260,1,0,0,0,267,261,1,0,0,0,267,263,1,0,0,0,267,266,1,
		0,0,0,268,301,1,0,0,0,269,270,10,8,0,0,270,271,3,130,65,0,271,272,3,22,
		11,9,272,300,1,0,0,0,273,274,10,7,0,0,274,275,3,140,70,0,275,276,3,22,
		11,8,276,300,1,0,0,0,277,278,10,6,0,0,278,279,3,138,69,0,279,280,3,22,
		11,7,280,300,1,0,0,0,281,282,10,5,0,0,282,283,3,136,68,0,283,284,3,22,
		11,6,284,300,1,0,0,0,285,286,10,4,0,0,286,287,5,34,0,0,287,300,3,22,11,
		5,288,289,10,3,0,0,289,290,5,33,0,0,290,300,3,22,11,4,291,292,10,11,0,
		0,292,293,5,16,0,0,293,300,3,12,6,0,294,295,10,10,0,0,295,296,5,17,0,0,
		296,300,3,12,6,0,297,298,10,2,0,0,298,300,3,24,12,0,299,269,1,0,0,0,299,
		273,1,0,0,0,299,277,1,0,0,0,299,281,1,0,0,0,299,285,1,0,0,0,299,288,1,
		0,0,0,299,291,1,0,0,0,299,294,1,0,0,0,299,297,1,0,0,0,300,303,1,0,0,0,
		301,299,1,0,0,0,301,302,1,0,0,0,302,23,1,0,0,0,303,301,1,0,0,0,304,305,
		5,70,0,0,305,306,3,22,11,0,306,307,5,61,0,0,307,308,3,22,11,0,308,25,1,
		0,0,0,309,310,5,19,0,0,310,316,3,12,6,0,311,314,4,13,9,0,312,315,3,148,
		74,0,313,315,3,154,77,0,314,312,1,0,0,0,314,313,1,0,0,0,315,317,1,0,0,
		0,316,311,1,0,0,0,316,317,1,0,0,0,317,27,1,0,0,0,318,319,5,65,0,0,319,
		324,3,116,58,0,320,321,5,69,0,0,321,323,3,116,58,0,322,320,1,0,0,0,323,
		326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,327,1,0,0,0,326,324,1,
		0,0,0,327,328,5,11,0,0,328,329,3,22,11,0,329,330,5,66,0,0,330,29,1,0,0,
		0,331,336,3,118,59,0,332,333,5,69,0,0,333,335,3,118,59,0,334,332,1,0,0,
		0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,31,1,0,0,0,338,336,
		1,0,0,0,339,344,3,126,63,0,340,341,5,69,0,0,341,343,3,126,63,0,342,340,
		1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,33,1,0,0,0,
		346,344,1,0,0,0,347,349,5,65,0,0,348,350,3,30,15,0,349,348,1,0,0,0,349,
		350,1,0,0,0,350,351,1,0,0,0,351,352,5,60,0,0,352,353,3,22,11,0,353,355,
		5,60,0,0,354,356,3,32,16,0,355,354,1,0,0,0,355,356,1,0,0,0,356,357,1,0,
		0,0,357,358,5,66,0,0,358,35,1,0,0,0,359,445,5,60,0,0,360,363,3,112,56,
		0,361,362,4,18,10,0,362,364,3,128,64,0,363,361,1,0,0,0,363,364,1,0,0,0,
		364,365,1,0,0,0,365,366,3,160,80,0,366,445,1,0,0,0,367,368,3,122,61,0,
		368,369,3,128,64,0,369,370,3,160,80,0,370,445,1,0,0,0,371,372,5,15,0,0,
		372,373,5,65,0,0,373,374,5,66,0,0,374,445,3,160,80,0,375,376,5,15,0,0,
		376,377,3,20,10,0,377,378,3,160,80,0,378,445,1,0,0,0,379,380,5,15,0,0,
		380,381,5,7,0,0,381,382,5,65,0,0,382,383,3,22,11,0,383,384,5,66,0,0,384,
		445,1,0,0,0,385,387,3,20,10,0,386,388,3,124,62,0,387,386,1,0,0,0,387,388,
		1,0,0,0,388,389,1,0,0,0,389,390,3,160,80,0,390,445,1,0,0,0,391,392,5,5,
		0,0,392,393,5,65,0,0,393,394,3,22,11,0,394,395,5,66,0,0,395,399,3,54,27,
		0,396,398,3,38,19,0,397,396,1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,
		400,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,402,404,3,40,20,0,403,402,
		1,0,0,0,403,404,1,0,0,0,404,445,1,0,0,0,405,406,5,7,0,0,406,407,5,65,0,
		0,407,408,3,22,11,0,408,409,5,66,0,0,409,410,3,54,27,0,410,445,1,0,0,0,
		411,412,5,8,0,0,412,413,3,54,27,0,413,414,5,7,0,0,414,415,5,65,0,0,415,
		416,3,22,11,0,416,417,5,66,0,0,417,418,3,160,80,0,418,445,1,0,0,0,419,
		420,5,9,0,0,420,421,3,34,17,0,421,422,3,54,27,0,422,445,1,0,0,0,423,424,
		5,10,0,0,424,425,3,28,14,0,425,426,3,54,27,0,426,445,1,0,0,0,427,428,5,
		12,0,0,428,445,3,160,80,0,429,430,5,13,0,0,430,445,3,160,80,0,431,434,
		5,14,0,0,432,433,4,18,11,0,433,435,3,16,8,0,434,432,1,0,0,0,434,435,1,
		0,0,0,435,436,1,0,0,0,436,445,3,160,80,0,437,438,5,20,0,0,438,445,3,54,
		27,0,439,440,5,21,0,0,440,445,3,54,27,0,441,442,5,22,0,0,442,445,3,54,
		27,0,443,445,3,54,27,0,444,359,1,0,0,0,444,360,1,0,0,0,444,367,1,0,0,0,
		444,371,1,0,0,0,444,375,1,0,0,0,444,379,1,0,0,0,444,385,1,0,0,0,444,391,
		1,0,0,0,444,405,1,0,0,0,444,411,1,0,0,0,444,419,1,0,0,0,444,423,1,0,0,
		0,444,427,1,0,0,0,444,429,1,0,0,0,444,431,1,0,0,0,444,437,1,0,0,0,444,
		439,1,0,0,0,444,441,1,0,0,0,444,443,1,0,0,0,445,37,1,0,0,0,446,447,5,6,
		0,0,447,448,5,5,0,0,448,449,5,65,0,0,449,450,3,22,11,0,450,451,5,66,0,
		0,451,452,3,54,27,0,452,39,1,0,0,0,453,454,5,6,0,0,454,455,3,54,27,0,455,
		41,1,0,0,0,456,460,3,48,24,0,457,460,3,46,23,0,458,460,3,44,22,0,459,456,
		1,0,0,0,459,457,1,0,0,0,459,458,1,0,0,0,460,43,1,0,0,0,461,462,4,22,12,
		0,462,463,5,63,0,0,463,464,3,22,11,0,464,465,5,64,0,0,465,45,1,0,0,0,466,
		467,5,62,0,0,467,468,5,55,0,0,468,47,1,0,0,0,469,471,5,65,0,0,470,472,
		3,50,25,0,471,470,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,474,5,66,
		0,0,474,49,1,0,0,0,475,480,3,52,26,0,476,477,5,69,0,0,477,479,3,52,26,
		0,478,476,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,
		51,1,0,0,0,482,480,1,0,0,0,483,485,5,58,0,0,484,483,1,0,0,0,484,485,1,
		0,0,0,485,488,1,0,0,0,486,487,5,55,0,0,487,489,5,61,0,0,488,486,1,0,0,
		0,488,489,1,0,0,0,489,491,1,0,0,0,490,492,5,32,0,0,491,490,1,0,0,0,491,
		492,1,0,0,0,492,493,1,0,0,0,493,494,3,22,11,0,494,53,1,0,0,0,495,499,5,
		67,0,0,496,498,3,36,18,0,497,496,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,
		0,499,500,1,0,0,0,500,502,1,0,0,0,501,499,1,0,0,0,502,503,5,68,0,0,503,
		55,1,0,0,0,504,505,5,61,0,0,505,510,3,10,5,0,506,507,5,69,0,0,507,509,
		3,10,5,0,508,506,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,
		0,511,57,1,0,0,0,512,510,1,0,0,0,513,514,5,23,0,0,514,515,3,8,4,0,515,
		519,5,67,0,0,516,518,3,6,3,0,517,516,1,0,0,0,518,521,1,0,0,0,519,517,1,
		0,0,0,519,520,1,0,0,0,520,522,1,0,0,0,521,519,1,0,0,0,522,523,5,68,0,0,
		523,59,1,0,0,0,524,525,5,24,0,0,525,527,5,55,0,0,526,528,3,56,28,0,527,
		526,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,530,3,62,31,0,530,61,1,
		0,0,0,531,532,5,67,0,0,532,533,3,64,32,0,533,534,5,68,0,0,534,63,1,0,0,
		0,535,537,3,70,35,0,536,535,1,0,0,0,537,540,1,0,0,0,538,536,1,0,0,0,538,
		539,1,0,0,0,539,65,1,0,0,0,540,538,1,0,0,0,541,542,5,29,0,0,542,67,1,0,
		0,0,543,545,3,66,33,0,544,543,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,
		546,547,1,0,0,0,547,549,1,0,0,0,548,546,1,0,0,0,549,550,3,110,55,0,550,
		69,1,0,0,0,551,557,3,68,34,0,552,557,3,88,44,0,553,557,3,60,30,0,554,557,
		3,80,40,0,555,557,3,72,36,0,556,551,1,0,0,0,556,552,1,0,0,0,556,553,1,
		0,0,0,556,554,1,0,0,0,556,555,1,0,0,0,557,71,1,0,0,0,558,559,5,25,0,0,
		559,561,5,55,0,0,560,562,3,56,28,0,561,560,1,0,0,0,561,562,1,0,0,0,562,
		563,1,0,0,0,563,564,3,74,37,0,564,73,1,0,0,0,565,566,5,67,0,0,566,567,
		3,76,38,0,567,568,5,68,0,0,568,75,1,0,0,0,569,571,3,78,39,0,570,569,1,
		0,0,0,571,574,1,0,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,77,1,0,0,0,574,
		572,1,0,0,0,575,576,3,94,47,0,576,79,1,0,0,0,577,578,5,26,0,0,578,579,
		5,55,0,0,579,580,3,82,41,0,580,81,1,0,0,0,581,583,5,67,0,0,582,584,3,84,
		42,0,583,582,1,0,0,0,584,585,1,0,0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,
		587,1,0,0,0,587,588,5,68,0,0,588,83,1,0,0,0,589,590,5,55,0,0,590,592,5,
		59,0,0,591,593,5,50,0,0,592,591,1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,
		0,594,595,5,72,0,0,595,85,1,0,0,0,596,597,7,0,0,0,597,87,1,0,0,0,598,600,
		3,86,43,0,599,598,1,0,0,0,600,603,1,0,0,0,601,599,1,0,0,0,601,602,1,0,
		0,0,602,604,1,0,0,0,603,601,1,0,0,0,604,606,5,31,0,0,605,607,3,100,50,
		0,606,605,1,0,0,0,606,607,1,0,0,0,607,608,1,0,0,0,608,609,5,55,0,0,609,
		611,5,65,0,0,610,612,3,106,53,0,611,610,1,0,0,0,611,612,1,0,0,0,612,613,
		1,0,0,0,613,614,5,66,0,0,614,615,3,92,46,0,615,89,1,0,0,0,616,618,5,30,
		0,0,617,616,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,621,5,31,0,0,620,
		622,3,100,50,0,621,620,1,0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,625,
		5,65,0,0,624,626,3,104,52,0,625,624,1,0,0,0,625,626,1,0,0,0,626,627,1,
		0,0,0,627,628,5,66,0,0,628,91,1,0,0,0,629,630,3,54,27,0,630,93,1,0,0,0,
		631,633,5,30,0,0,632,631,1,0,0,0,632,633,1,0,0,0,633,634,1,0,0,0,634,636,
		5,31,0,0,635,637,3,100,50,0,636,635,1,0,0,0,636,637,1,0,0,0,637,638,1,
		0,0,0,638,639,5,55,0,0,639,641,5,65,0,0,640,642,3,106,53,0,641,640,1,0,
		0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,644,5,66,0,0,644,95,1,0,0,0,645,
		647,5,30,0,0,646,645,1,0,0,0,646,647,1,0,0,0,647,648,1,0,0,0,648,650,5,
		31,0,0,649,651,3,100,50,0,650,649,1,0,0,0,650,651,1,0,0,0,651,652,1,0,
		0,0,652,654,5,65,0,0,653,655,3,106,53,0,654,653,1,0,0,0,654,655,1,0,0,
		0,655,656,1,0,0,0,656,658,5,66,0,0,657,659,3,102,51,0,658,657,1,0,0,0,
		658,659,1,0,0,0,659,660,1,0,0,0,660,661,3,92,46,0,661,97,1,0,0,0,662,664,
		5,32,0,0,663,662,1,0,0,0,663,664,1,0,0,0,664,665,1,0,0,0,665,666,3,12,
		6,0,666,99,1,0,0,0,667,672,3,12,6,0,668,669,5,69,0,0,669,671,3,12,6,0,
		670,668,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,101,
		1,0,0,0,674,672,1,0,0,0,675,676,5,63,0,0,676,681,5,55,0,0,677,678,5,69,
		0,0,678,680,5,55,0,0,679,677,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,681,
		682,1,0,0,0,682,684,1,0,0,0,683,681,1,0,0,0,684,685,5,64,0,0,685,103,1,
		0,0,0,686,691,3,98,49,0,687,688,5,69,0,0,688,690,3,98,49,0,689,687,1,0,
		0,0,690,693,1,0,0,0,691,689,1,0,0,0,691,692,1,0,0,0,692,105,1,0,0,0,693,
		691,1,0,0,0,694,699,3,108,54,0,695,696,5,69,0,0,696,698,3,108,54,0,697,
		695,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,699,700,1,0,0,0,700,107,1,
		0,0,0,701,699,1,0,0,0,702,704,5,32,0,0,703,702,1,0,0,0,703,704,1,0,0,0,
		704,706,1,0,0,0,705,707,5,58,0,0,706,705,1,0,0,0,706,707,1,0,0,0,707,708,
		1,0,0,0,708,709,3,12,6,0,709,711,5,55,0,0,710,712,3,128,64,0,711,710,1,
		0,0,0,711,712,1,0,0,0,712,109,1,0,0,0,713,714,3,12,6,0,714,715,5,55,0,
		0,715,111,1,0,0,0,716,721,3,110,55,0,717,718,5,69,0,0,718,720,3,110,55,
		0,719,717,1,0,0,0,720,723,1,0,0,0,721,719,1,0,0,0,721,722,1,0,0,0,722,
		113,1,0,0,0,723,721,1,0,0,0,724,726,5,29,0,0,725,724,1,0,0,0,725,726,1,
		0,0,0,726,727,1,0,0,0,727,729,3,110,55,0,728,730,3,128,64,0,729,728,1,
		0,0,0,729,730,1,0,0,0,730,731,1,0,0,0,731,732,3,160,80,0,732,115,1,0,0,
		0,733,736,3,110,55,0,734,736,5,55,0,0,735,733,1,0,0,0,735,734,1,0,0,0,
		736,117,1,0,0,0,737,738,3,116,58,0,738,739,3,128,64,0,739,119,1,0,0,0,
		740,743,3,110,55,0,741,743,3,20,10,0,742,740,1,0,0,0,742,741,1,0,0,0,743,
		121,1,0,0,0,744,749,3,120,60,0,745,746,5,69,0,0,746,748,3,120,60,0,747,
		745,1,0,0,0,748,751,1,0,0,0,749,747,1,0,0,0,749,750,1,0,0,0,750,123,1,
		0,0,0,751,749,1,0,0,0,752,758,3,128,64,0,753,758,3,132,66,0,754,755,3,
		134,67,0,755,756,3,22,11,0,756,758,1,0,0,0,757,752,1,0,0,0,757,753,1,0,
		0,0,757,754,1,0,0,0,758,125,1,0,0,0,759,760,3,20,10,0,760,761,3,124,62,
		0,761,127,1,0,0,0,762,763,5,59,0,0,763,764,3,22,11,0,764,129,1,0,0,0,765,
		766,7,1,0,0,766,131,1,0,0,0,767,768,7,2,0,0,768,133,1,0,0,0,769,770,7,
		3,0,0,770,135,1,0,0,0,771,772,7,4,0,0,772,137,1,0,0,0,773,774,7,5,0,0,
		774,139,1,0,0,0,775,776,7,6,0,0,776,141,1,0,0,0,777,778,7,7,0,0,778,143,
		1,0,0,0,779,780,7,8,0,0,780,145,1,0,0,0,781,782,5,71,0,0,782,147,1,0,0,
		0,783,784,5,67,0,0,784,789,3,152,76,0,785,786,5,69,0,0,786,788,3,152,76,
		0,787,785,1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,
		792,1,0,0,0,791,789,1,0,0,0,792,793,5,68,0,0,793,796,1,0,0,0,794,796,3,
		150,75,0,795,783,1,0,0,0,795,794,1,0,0,0,796,149,1,0,0,0,797,798,5,67,
		0,0,798,799,5,68,0,0,799,151,1,0,0,0,800,801,5,55,0,0,801,802,5,61,0,0,
		802,803,3,158,79,0,803,153,1,0,0,0,804,805,5,63,0,0,805,810,3,158,79,0,
		806,807,5,69,0,0,807,809,3,158,79,0,808,806,1,0,0,0,809,812,1,0,0,0,810,
		808,1,0,0,0,810,811,1,0,0,0,811,813,1,0,0,0,812,810,1,0,0,0,813,814,5,
		64,0,0,814,817,1,0,0,0,815,817,3,156,78,0,816,804,1,0,0,0,816,815,1,0,
		0,0,817,155,1,0,0,0,818,819,5,56,0,0,819,157,1,0,0,0,820,821,3,22,11,0,
		821,159,1,0,0,0,822,827,5,60,0,0,823,827,5,0,0,1,824,827,4,80,13,0,825,
		827,4,80,14,0,826,822,1,0,0,0,826,823,1,0,0,0,826,824,1,0,0,0,826,825,
		1,0,0,0,827,161,1,0,0,0,78,165,172,179,188,194,198,204,208,219,223,233,
		238,267,299,301,314,316,324,336,344,349,355,363,387,399,403,434,444,459,
		471,480,484,488,491,499,510,519,527,538,546,556,561,572,585,592,601,606,
		611,617,621,625,632,636,641,646,650,654,658,663,672,681,691,699,703,706,
		711,721,725,729,735,742,749,757,789,795,810,816,826
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
