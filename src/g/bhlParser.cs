//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./grammar/bhlParser.g by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class bhlParser : bhlParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IMPORT=1, NULL=2, FALSE=3, TRUE=4, IF=5, ELSE=6, WHILE=7, DO=8, FOR=9, 
		FOREACH=10, IN=11, BREAK=12, CONTINUE=13, RETURN=14, YIELD=15, AS=16, 
		IS=17, TYPEOF=18, NEW=19, PARAL=20, PARAL_ALL=21, DEFER=22, NAMESPACE=23, 
		CLASS=24, INTERFACE=25, ENUM=26, VIRTUAL=27, OVERRIDE=28, STATIC=29, CORO=30, 
		FUNC=31, REF=32, LOR=33, LAND=34, BOR=35, BAND=36, BNOT=37, SHR=38, SHL=39, 
		INC=40, DEC=41, SINC=42, SDEC=43, SMUL=44, SDIV=45, LT=46, LTE=47, GT=48, 
		GTE=49, NEQ=50, EQ=51, PLUS=52, MINUS=53, MUL=54, DIV=55, MOD=56, NOT=57, 
		NAME=58, GLOBAL=59, VARIADIC=60, ASSIGN=61, SEMI=62, COLON=63, DOT=64, 
		OPEN_BRACKET=65, CLOSE_BRACKET=66, OPEN_PAREN=67, CLOSE_PAREN=68, OPEN_BRACE=69, 
		CLOSE_BRACE=70, COMMA=71, QUESTION=72, NORMALSTRING=73, INT=74, HEX=75, 
		FLOAT=76, SINGLE_LINE_COMMENT=77, DELIMITED_COMMENT=78, WS=79, NL=80;
	public const int
		RULE_program = 0, RULE_declOrImport = 1, RULE_mimport = 2, RULE_decl = 3, 
		RULE_dotName = 4, RULE_nsName = 5, RULE_type = 6, RULE_arrType = 7, RULE_mapType = 8, 
		RULE_expList = 9, RULE_name = 10, RULE_chainExp = 11, RULE_exp = 12, RULE_ternaryIfExp = 13, 
		RULE_newExp = 14, RULE_foreachExp = 15, RULE_forPreIter = 16, RULE_forPostIter = 17, 
		RULE_forExp = 18, RULE_statement = 19, RULE_elseIf = 20, RULE_else = 21, 
		RULE_chainExpItem = 22, RULE_arrAccess = 23, RULE_memberAccess = 24, RULE_callArgs = 25, 
		RULE_callArgsList = 26, RULE_callArg = 27, RULE_block = 28, RULE_extensions = 29, 
		RULE_nsDecl = 30, RULE_classDecl = 31, RULE_classBlock = 32, RULE_classMembers = 33, 
		RULE_fldAttribs = 34, RULE_fldDeclare = 35, RULE_classMember = 36, RULE_interfaceDecl = 37, 
		RULE_interfaceBlock = 38, RULE_interfaceMembers = 39, RULE_interfaceMember = 40, 
		RULE_enumDecl = 41, RULE_enumBlock = 42, RULE_enumMember = 43, RULE_funcAttribs = 44, 
		RULE_funcDecl = 45, RULE_funcType = 46, RULE_funcBlock = 47, RULE_interfaceFuncDecl = 48, 
		RULE_funcLambda = 49, RULE_refType = 50, RULE_retType = 51, RULE_captureList = 52, 
		RULE_types = 53, RULE_funcParams = 54, RULE_funcParamDeclare = 55, RULE_varDeclare = 56, 
		RULE_varDeclareList = 57, RULE_varDeclareOptAssign = 58, RULE_varOrDeclare = 59, 
		RULE_varOrDeclareAssign = 60, RULE_varDeclareOrChainExp = 61, RULE_varDeclaresOrChainExps = 62, 
		RULE_modifyOp = 63, RULE_expModifyOp = 64, RULE_assignExp = 65, RULE_operatorBitwise = 66, 
		RULE_operatorIncDec = 67, RULE_operatorSelfOp = 68, RULE_operatorComparison = 69, 
		RULE_operatorAddSub = 70, RULE_operatorMulDivMod = 71, RULE_operatorUnary = 72, 
		RULE_number = 73, RULE_string = 74, RULE_jsonObject = 75, RULE_jsonEmptyObj = 76, 
		RULE_jsonPair = 77, RULE_jsonArray = 78, RULE_jsonEmptyArr = 79, RULE_jsonValue = 80, 
		RULE_eos = 81;
	public static readonly string[] ruleNames = {
		"program", "declOrImport", "mimport", "decl", "dotName", "nsName", "type", 
		"arrType", "mapType", "expList", "name", "chainExp", "exp", "ternaryIfExp", 
		"newExp", "foreachExp", "forPreIter", "forPostIter", "forExp", "statement", 
		"elseIf", "else", "chainExpItem", "arrAccess", "memberAccess", "callArgs", 
		"callArgsList", "callArg", "block", "extensions", "nsDecl", "classDecl", 
		"classBlock", "classMembers", "fldAttribs", "fldDeclare", "classMember", 
		"interfaceDecl", "interfaceBlock", "interfaceMembers", "interfaceMember", 
		"enumDecl", "enumBlock", "enumMember", "funcAttribs", "funcDecl", "funcType", 
		"funcBlock", "interfaceFuncDecl", "funcLambda", "refType", "retType", 
		"captureList", "types", "funcParams", "funcParamDeclare", "varDeclare", 
		"varDeclareList", "varDeclareOptAssign", "varOrDeclare", "varOrDeclareAssign", 
		"varDeclareOrChainExp", "varDeclaresOrChainExps", "modifyOp", "expModifyOp", 
		"assignExp", "operatorBitwise", "operatorIncDec", "operatorSelfOp", "operatorComparison", 
		"operatorAddSub", "operatorMulDivMod", "operatorUnary", "number", "string", 
		"jsonObject", "jsonEmptyObj", "jsonPair", "jsonArray", "jsonEmptyArr", 
		"jsonValue", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "'null'", "'false'", "'true'", "'if'", "'else'", "'while'", 
		"'do'", "'for'", "'foreach'", "'in'", "'break'", "'continue'", "'return'", 
		"'yield'", "'as'", "'is'", "'typeof'", "'new'", "'paral'", "'paral_all'", 
		"'defer'", "'namespace'", "'class'", "'interface'", "'enum'", "'virtual'", 
		"'override'", "'static'", "'coro'", "'func'", "'ref'", "'||'", "'&&'", 
		"'|'", "'&'", "'~'", "'>>'", "'<<'", "'++'", "'--'", "'+='", "'-='", "'*='", 
		"'/='", "'<'", "'<='", "'>'", "'>='", "'!='", "'=='", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'!'", null, "'..'", "'...'", "'='", "';'", "':'", "'.'", 
		"'['", "']'", "'('", "')'", "'{'", "'}'", "','", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IMPORT", "NULL", "FALSE", "TRUE", "IF", "ELSE", "WHILE", "DO", 
		"FOR", "FOREACH", "IN", "BREAK", "CONTINUE", "RETURN", "YIELD", "AS", 
		"IS", "TYPEOF", "NEW", "PARAL", "PARAL_ALL", "DEFER", "NAMESPACE", "CLASS", 
		"INTERFACE", "ENUM", "VIRTUAL", "OVERRIDE", "STATIC", "CORO", "FUNC", 
		"REF", "LOR", "LAND", "BOR", "BAND", "BNOT", "SHR", "SHL", "INC", "DEC", 
		"SINC", "SDEC", "SMUL", "SDIV", "LT", "LTE", "GT", "GTE", "NEQ", "EQ", 
		"PLUS", "MINUS", "MUL", "DIV", "MOD", "NOT", "NAME", "GLOBAL", "VARIADIC", 
		"ASSIGN", "SEMI", "COLON", "DOT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "COMMA", "QUESTION", "NORMALSTRING", 
		"INT", "HEX", "FLOAT", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WS", 
		"NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "bhlParser.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static bhlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public bhlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public bhlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(bhlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclOrImportContext[] declOrImport() {
			return GetRuleContexts<DeclOrImportContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclOrImportContext declOrImport(int i) {
			return GetRuleContext<DeclOrImportContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 864691132741713922L) != 0) || _la==OPEN_BRACKET) {
				{
				{
				State = 164;
				declOrImport();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 170;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclOrImportContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl() {
			return GetRuleContext<DeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MimportContext mimport() {
			return GetRuleContext<MimportContext>(0);
		}
		public DeclOrImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declOrImport; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterDeclOrImport(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitDeclOrImport(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclOrImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclOrImportContext declOrImport() {
		DeclOrImportContext _localctx = new DeclOrImportContext(Context, State);
		EnterRule(_localctx, 2, RULE_declOrImport);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
			case CLASS:
			case INTERFACE:
			case ENUM:
			case VIRTUAL:
			case OVERRIDE:
			case STATIC:
			case CORO:
			case FUNC:
			case NAME:
			case GLOBAL:
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				decl();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				mimport();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MimportContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(bhlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALSTRING() { return GetToken(bhlParser.NORMALSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(bhlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(bhlParser.SEMI, i);
		}
		public MimportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mimport; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterMimport(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitMimport(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMimport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MimportContext mimport() {
		MimportContext _localctx = new MimportContext(Context, State);
		EnterRule(_localctx, 4, RULE_mimport);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(IMPORT);
			State = 177;
			Match(NORMALSTRING);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 178;
				Match(SEMI);
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NsDeclContext nsDecl() {
			return GetRuleContext<NsDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclContext interfaceDecl() {
			return GetRuleContext<InterfaceDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl() {
			return GetRuleContext<FuncDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareOptAssignContext varDeclareOptAssign() {
			return GetRuleContext<VarDeclareOptAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclContext enumDecl() {
			return GetRuleContext<EnumDeclContext>(0);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 184;
				nsDecl();
				}
				break;
			case 2:
				{
				State = 185;
				classDecl();
				}
				break;
			case 3:
				{
				State = 186;
				interfaceDecl();
				}
				break;
			case 4:
				{
				State = 187;
				funcDecl();
				}
				break;
			case 5:
				{
				State = 188;
				varDeclareOptAssign();
				}
				break;
			case 6:
				{
				State = 189;
				enumDecl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext[] memberAccess() {
			return GetRuleContexts<MemberAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext memberAccess(int i) {
			return GetRuleContext<MemberAccessContext>(i);
		}
		public DotNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterDotName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitDotName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotNameContext dotName() {
		DotNameContext _localctx = new DotNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_dotName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(NAME);
			State = 196;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 193;
					memberAccess();
					}
					} 
				}
				State = 198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NsNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DotNameContext dotName() {
			return GetRuleContext<DotNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(bhlParser.GLOBAL, 0); }
		public NsNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nsName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterNsName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitNsName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNsName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NsNameContext nsName() {
		NsNameContext _localctx = new NsNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_nsName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL) {
				{
				State = 199;
				Match(GLOBAL);
				}
			}

			State = 202;
			dotName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NsNameContext nsName() {
			return GetRuleContext<NsNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncTypeContext funcType() {
			return GetRuleContext<FuncTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrTypeContext arrType() {
			return GetRuleContext<ArrTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapTypeContext mapType() {
			return GetRuleContext<MapTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 204;
				arrType();
				}
				break;
			case 2:
				{
				State = 205;
				mapType();
				}
				break;
			}
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
			case GLOBAL:
				{
				State = 208;
				nsName();
				}
				break;
			case CORO:
			case FUNC:
				{
				State = 209;
				funcType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(bhlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(bhlParser.CLOSE_BRACKET, 0); }
		public ArrTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterArrType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitArrType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrTypeContext arrType() {
		ArrTypeContext _localctx = new ArrTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_arrType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(OPEN_BRACKET);
			State = 213;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(bhlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NsNameContext nsName() {
			return GetRuleContext<NsNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(bhlParser.CLOSE_BRACKET, 0); }
		public MapTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterMapType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitMapType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapTypeContext mapType() {
		MapTypeContext _localctx = new MapTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_mapType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(OPEN_BRACKET);
			State = 216;
			nsName();
			State = 217;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public ExpListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpListContext expList() {
		ExpListContext _localctx = new ExpListContext(Context, State);
		EnterRule(_localctx, 18, RULE_expList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			exp(0);
			State = 224;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 220;
					Match(COMMA);
					State = 221;
					exp(0);
					}
					} 
				}
				State = 226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(bhlParser.GLOBAL, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 20, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL) {
				{
				State = 227;
				Match(GLOBAL);
				}
			}

			State = 230;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncLambdaContext funcLambda() {
			return GetRuleContext<FuncLambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpItemContext[] chainExpItem() {
			return GetRuleContexts<ChainExpItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpItemContext chainExpItem(int i) {
			return GetRuleContext<ChainExpItemContext>(i);
		}
		public ChainExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterChainExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitChainExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainExpContext chainExp() {
		ChainExpContext _localctx = new ChainExpContext(Context, State);
		EnterRule(_localctx, 22, RULE_chainExp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
			case GLOBAL:
				{
				State = 232;
				name();
				}
				break;
			case OPEN_PAREN:
				{
				State = 233;
				Match(OPEN_PAREN);
				State = 234;
				exp(0);
				State = 235;
				Match(CLOSE_PAREN);
				}
				break;
			case CORO:
			case FUNC:
				{
				State = 237;
				funcLambda();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 240;
					chainExpItem();
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpJsonArrContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonArrayContext jsonArray() {
			return GetRuleContext<JsonArrayContext>(0);
		}
		public ExpJsonArrContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpJsonArr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpJsonArr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpJsonArr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpTypeofContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(bhlParser.TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		public ExpTypeofContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpTypeof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpTypeof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpTypeof(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpIsContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(bhlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpIsContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpIs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpIs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralFalseContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(bhlParser.FALSE, 0); }
		public ExpLiteralFalseContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLiteralFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLiteralFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralNumContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ExpLiteralNumContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLiteralNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLiteralNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMulDivModContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public ExpMulDivModContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpCompareContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public ExpCompareContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpCompare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpCompare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAsContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(bhlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpAsContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpAs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpAs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralStrContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ExpLiteralStrContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLiteralStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLiteralStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralTrueContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(bhlParser.TRUE, 0); }
		public ExpLiteralTrueContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLiteralTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLiteralTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpJsonObjContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonObjectContext jsonObject() {
			return GetRuleContext<JsonObjectContext>(0);
		}
		public ExpJsonObjContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpJsonObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpJsonObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpJsonObj(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpUnaryContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ExpUnaryContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNewContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewExpContext newExp() {
			return GetRuleContext<NewExpContext>(0);
		}
		public ExpNewContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpNew(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpNew(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAddSubContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public ExpAddSubContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpYieldCallContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(bhlParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpContext chainExp() {
			return GetRuleContext<ChainExpContext>(0);
		}
		public ExpYieldCallContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpYieldCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpYieldCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpYieldCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpBitwiseContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public ExpBitwiseContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLiteralNullContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(bhlParser.NULL, 0); }
		public ExpLiteralNullContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLiteralNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLiteralNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLiteralNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpTypeCastContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ExpTypeCastContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpTypeCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpTypeCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpTypeCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpTernaryIfContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TernaryIfExpContext ternaryIfExp() {
			return GetRuleContext<TernaryIfExpContext>(0);
		}
		public ExpTernaryIfContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpTernaryIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpTernaryIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpTernaryIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLogicalAndContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAND() { return GetToken(bhlParser.LAND, 0); }
		public ExpLogicalAndContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLogicalAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLogicalAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLogicalOrContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOR() { return GetToken(bhlParser.LOR, 0); }
		public ExpLogicalOrContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLogicalOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLogicalOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpLambdaContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncLambdaContext funcLambda() {
			return GetRuleContext<FuncLambdaContext>(0);
		}
		public ExpLambdaContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpLambda(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpChainContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpContext chainExp() {
			return GetRuleContext<ChainExpContext>(0);
		}
		public ExpChainContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpChain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new ExpLiteralNullContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 247;
				Match(NULL);
				}
				break;
			case 2:
				{
				_localctx = new ExpLiteralFalseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 248;
				Match(FALSE);
				}
				break;
			case 3:
				{
				_localctx = new ExpLiteralTrueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 249;
				Match(TRUE);
				}
				break;
			case 4:
				{
				_localctx = new ExpLiteralNumContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 250;
				number();
				}
				break;
			case 5:
				{
				_localctx = new ExpLiteralStrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 251;
				@string();
				}
				break;
			case 6:
				{
				_localctx = new ExpTypeCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 252;
				Match(OPEN_PAREN);
				State = 253;
				type();
				State = 254;
				Match(CLOSE_PAREN);
				State = 255;
				exp(18);
				}
				break;
			case 7:
				{
				_localctx = new ExpChainContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 257;
				chainExp();
				}
				break;
			case 8:
				{
				_localctx = new ExpLambdaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 258;
				funcLambda();
				}
				break;
			case 9:
				{
				_localctx = new ExpTypeofContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 259;
				Match(TYPEOF);
				State = 260;
				Match(OPEN_PAREN);
				State = 261;
				type();
				State = 262;
				Match(CLOSE_PAREN);
				}
				break;
			case 10:
				{
				_localctx = new ExpJsonObjContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 264;
				jsonObject();
				}
				break;
			case 11:
				{
				_localctx = new ExpJsonArrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 265;
				jsonArray();
				}
				break;
			case 12:
				{
				_localctx = new ExpYieldCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 266;
				Match(YIELD);
				State = 267;
				chainExp();
				}
				break;
			case 13:
				{
				_localctx = new ExpUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 268;
				operatorUnary();
				State = 269;
				exp(9);
				}
				break;
			case 14:
				{
				_localctx = new ExpNewContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 271;
				newExp();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 306;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 304;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new ExpBitwiseContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 274;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 275;
						operatorBitwise();
						State = 276;
						exp(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpMulDivModContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 278;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 279;
						operatorMulDivMod();
						State = 280;
						exp(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpAddSubContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 282;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 283;
						operatorAddSub();
						State = 284;
						exp(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpCompareContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 286;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 287;
						operatorComparison();
						State = 288;
						exp(6);
						}
						break;
					case 5:
						{
						_localctx = new ExpLogicalAndContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 290;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 291;
						Match(LAND);
						State = 292;
						exp(5);
						}
						break;
					case 6:
						{
						_localctx = new ExpLogicalOrContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 293;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 294;
						Match(LOR);
						State = 295;
						exp(4);
						}
						break;
					case 7:
						{
						_localctx = new ExpAsContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 296;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 297;
						Match(AS);
						State = 298;
						type();
						}
						break;
					case 8:
						{
						_localctx = new ExpIsContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 299;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 300;
						Match(IS);
						State = 301;
						type();
						}
						break;
					case 9:
						{
						_localctx = new ExpTernaryIfContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 302;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 303;
						ternaryIfExp();
						}
						break;
					}
					} 
				}
				State = 308;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TernaryIfExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(bhlParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(bhlParser.COLON, 0); }
		public TernaryIfExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternaryIfExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterTernaryIfExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitTernaryIfExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryIfExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TernaryIfExpContext ternaryIfExp() {
		TernaryIfExpContext _localctx = new TernaryIfExpContext(Context, State);
		EnterRule(_localctx, 26, RULE_ternaryIfExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(QUESTION);
			State = 310;
			exp(0);
			State = 311;
			Match(COLON);
			State = 312;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(bhlParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonObjectContext jsonObject() {
			return GetRuleContext<JsonObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonArrayContext jsonArray() {
			return GetRuleContext<JsonArrayContext>(0);
		}
		public NewExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterNewExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitNewExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExpContext newExp() {
		NewExpContext _localctx = new NewExpContext(Context, State);
		EnterRule(_localctx, 28, RULE_newExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(NEW);
			State = 315;
			type();
			State = 319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 316;
				jsonObject();
				}
				break;
			case 2:
				{
				{
				State = 317;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 318;
				jsonArray();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarOrDeclareContext[] varOrDeclare() {
			return GetRuleContexts<VarOrDeclareContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarOrDeclareContext varOrDeclare(int i) {
			return GetRuleContext<VarOrDeclareContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(bhlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public ForeachExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterForeachExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitForeachExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachExpContext foreachExp() {
		ForeachExpContext _localctx = new ForeachExpContext(Context, State);
		EnterRule(_localctx, 30, RULE_foreachExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			Match(OPEN_PAREN);
			State = 322;
			varOrDeclare();
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 323;
				Match(COMMA);
				State = 324;
				varOrDeclare();
				}
				}
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 330;
			Match(IN);
			State = 331;
			exp(0);
			State = 332;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForPreIterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrDeclareAssignContext[] varOrDeclareAssign() {
			return GetRuleContexts<VarOrDeclareAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarOrDeclareAssignContext varOrDeclareAssign(int i) {
			return GetRuleContext<VarOrDeclareAssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public ForPreIterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forPreIter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterForPreIter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitForPreIter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForPreIter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForPreIterContext forPreIter() {
		ForPreIterContext _localctx = new ForPreIterContext(Context, State);
		EnterRule(_localctx, 32, RULE_forPreIter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			varOrDeclareAssign();
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 335;
				Match(COMMA);
				State = 336;
				varOrDeclareAssign();
				}
				}
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForPostIterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpModifyOpContext[] expModifyOp() {
			return GetRuleContexts<ExpModifyOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpModifyOpContext expModifyOp(int i) {
			return GetRuleContext<ExpModifyOpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public ForPostIterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forPostIter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterForPostIter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitForPostIter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForPostIter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForPostIterContext forPostIter() {
		ForPostIterContext _localctx = new ForPostIterContext(Context, State);
		EnterRule(_localctx, 34, RULE_forPostIter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			expModifyOp();
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 343;
				Match(COMMA);
				State = 344;
				expModifyOp();
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(bhlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(bhlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForPreIterContext forPreIter() {
			return GetRuleContext<ForPreIterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForPostIterContext forPostIter() {
			return GetRuleContext<ForPostIterContext>(0);
		}
		public ForExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterForExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitForExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForExpContext forExp() {
		ForExpContext _localctx = new ForExpContext(Context, State);
		EnterRule(_localctx, 36, RULE_forExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			Match(OPEN_PAREN);
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 35165044739L) != 0)) {
				{
				State = 351;
				forPreIter();
				}
			}

			State = 354;
			Match(SEMI);
			State = 355;
			exp(0);
			State = 356;
			Match(SEMI);
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 138244259843L) != 0)) {
				{
				State = 357;
				forPostIter();
				}
			}

			State = 360;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmSeparatorContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(bhlParser.SEMI, 0); }
		public StmSeparatorContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmSeparator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmChainExpContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpContext chainExp() {
			return GetRuleContext<ChainExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifyOpContext modifyOp() {
			return GetRuleContext<ModifyOpContext>(0);
		}
		public StmChainExpContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmChainExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmChainExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmChainExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmDoWhileContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(bhlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(bhlParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StmDoWhileContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmDoWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmDoWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmDoWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmDeferContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFER() { return GetToken(bhlParser.DEFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmDeferContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmDefer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmDefer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmDefer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmParalContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAL() { return GetToken(bhlParser.PARAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmParalContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmParal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmParal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmParal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmWhileContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(bhlParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmWhileContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmForContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(bhlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForExpContext forExp() {
			return GetRuleContext<ForExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmForContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmFor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmDeclOptAssignContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareListContext varDeclareList() {
			return GetRuleContext<VarDeclareListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		public StmDeclOptAssignContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmDeclOptAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmDeclOptAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmDeclOptAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmYieldContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(bhlParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StmYieldContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmYield(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmYield(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmYield(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmIfContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(bhlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfContext[] elseIf() {
			return GetRuleContexts<ElseIfContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfContext elseIf(int i) {
			return GetRuleContext<ElseIfContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public StmIfContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmReturnContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(bhlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpListContext expList() {
			return GetRuleContext<ExpListContext>(0);
		}
		public StmReturnContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmDeclOrExpAssignContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclaresOrChainExpsContext varDeclaresOrChainExps() {
			return GetRuleContext<VarDeclaresOrChainExpsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StmDeclOrExpAssignContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmDeclOrExpAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmDeclOrExpAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmDeclOrExpAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmContinueContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(bhlParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StmContinueContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmContinue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmContinue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmContinue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmBlockNestedContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmBlockNestedContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmBlockNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmBlockNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmBlockNested(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmForeachContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(bhlParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForeachExpContext foreachExp() {
			return GetRuleContext<ForeachExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmForeachContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmForeach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmForeach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmForeach(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmYieldCallContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(bhlParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpContext chainExp() {
			return GetRuleContext<ChainExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StmYieldCallContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmYieldCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmYieldCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmYieldCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmYieldWhileContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(bhlParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(bhlParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		public StmYieldWhileContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmYieldWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmYieldWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmYieldWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmParalAllContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAL_ALL() { return GetToken(bhlParser.PARAL_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmParalAllContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmParalAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmParalAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmParalAll(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmBreakContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(bhlParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StmBreakContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterStmBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitStmBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				_localctx = new StmSeparatorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 362;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new StmDeclOptAssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 363;
				varDeclareList();
				State = 366;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 364;
					if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
					State = 365;
					assignExp();
					}
					break;
				}
				State = 368;
				eos();
				}
				break;
			case 3:
				_localctx = new StmDeclOrExpAssignContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 370;
				varDeclaresOrChainExps();
				State = 371;
				assignExp();
				State = 372;
				eos();
				}
				break;
			case 4:
				_localctx = new StmYieldContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 374;
				Match(YIELD);
				State = 375;
				Match(OPEN_PAREN);
				State = 376;
				Match(CLOSE_PAREN);
				State = 377;
				eos();
				}
				break;
			case 5:
				_localctx = new StmYieldCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 378;
				Match(YIELD);
				State = 379;
				chainExp();
				State = 380;
				eos();
				}
				break;
			case 6:
				_localctx = new StmYieldWhileContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 382;
				Match(YIELD);
				State = 383;
				Match(WHILE);
				State = 384;
				Match(OPEN_PAREN);
				State = 385;
				exp(0);
				State = 386;
				Match(CLOSE_PAREN);
				}
				break;
			case 7:
				_localctx = new StmChainExpContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 388;
				chainExp();
				State = 390;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 389;
					modifyOp();
					}
					break;
				}
				State = 392;
				eos();
				}
				break;
			case 8:
				_localctx = new StmIfContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 394;
				Match(IF);
				State = 395;
				Match(OPEN_PAREN);
				State = 396;
				exp(0);
				State = 397;
				Match(CLOSE_PAREN);
				State = 398;
				block();
				State = 402;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 399;
						elseIf();
						}
						} 
					}
					State = 404;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 405;
					@else();
					}
				}

				}
				break;
			case 9:
				_localctx = new StmWhileContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 408;
				Match(WHILE);
				State = 409;
				Match(OPEN_PAREN);
				State = 410;
				exp(0);
				State = 411;
				Match(CLOSE_PAREN);
				State = 412;
				block();
				}
				break;
			case 10:
				_localctx = new StmDoWhileContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 414;
				Match(DO);
				State = 415;
				block();
				State = 416;
				Match(WHILE);
				State = 417;
				Match(OPEN_PAREN);
				State = 418;
				exp(0);
				State = 419;
				Match(CLOSE_PAREN);
				State = 420;
				eos();
				}
				break;
			case 11:
				_localctx = new StmForContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 422;
				Match(FOR);
				State = 423;
				forExp();
				State = 424;
				block();
				}
				break;
			case 12:
				_localctx = new StmForeachContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 426;
				Match(FOREACH);
				State = 427;
				foreachExp();
				State = 428;
				block();
				}
				break;
			case 13:
				_localctx = new StmBreakContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 430;
				Match(BREAK);
				State = 431;
				eos();
				}
				break;
			case 14:
				_localctx = new StmContinueContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 432;
				Match(CONTINUE);
				State = 433;
				eos();
				}
				break;
			case 15:
				_localctx = new StmReturnContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 434;
				Match(RETURN);
				State = 437;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 435;
					if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
					State = 436;
					expList();
					}
					break;
				}
				State = 439;
				eos();
				}
				break;
			case 16:
				_localctx = new StmParalContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 440;
				Match(PARAL);
				State = 441;
				block();
				}
				break;
			case 17:
				_localctx = new StmParalAllContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 442;
				Match(PARAL_ALL);
				State = 443;
				block();
				}
				break;
			case 18:
				_localctx = new StmDeferContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 444;
				Match(DEFER);
				State = 445;
				block();
				}
				break;
			case 19:
				_localctx = new StmBlockNestedContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 446;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(bhlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(bhlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterElseIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitElseIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfContext elseIf() {
		ElseIfContext _localctx = new ElseIfContext(Context, State);
		EnterRule(_localctx, 40, RULE_elseIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(ELSE);
			State = 450;
			Match(IF);
			State = 451;
			Match(OPEN_PAREN);
			State = 452;
			exp(0);
			State = 453;
			Match(CLOSE_PAREN);
			State = 454;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(bhlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(Context, State);
		EnterRule(_localctx, 42, RULE_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			Match(ELSE);
			State = 457;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainExpItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallArgsContext callArgs() {
			return GetRuleContext<CallArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrAccessContext arrAccess() {
			return GetRuleContext<ArrAccessContext>(0);
		}
		public ChainExpItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainExpItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterChainExpItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitChainExpItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainExpItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainExpItemContext chainExpItem() {
		ChainExpItemContext _localctx = new ChainExpItemContext(Context, State);
		EnterRule(_localctx, 44, RULE_chainExpItem);
		try {
			State = 462;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 459;
				callArgs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 460;
				memberAccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 461;
				arrAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(bhlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(bhlParser.CLOSE_BRACKET, 0); }
		public ArrAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterArrAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitArrAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrAccessContext arrAccess() {
		ArrAccessContext _localctx = new ArrAccessContext(Context, State);
		EnterRule(_localctx, 46, RULE_arrAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 464;
			if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
			State = 465;
			Match(OPEN_BRACKET);
			State = 466;
			exp(0);
			State = 467;
			Match(CLOSE_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(bhlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public MemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessContext memberAccess() {
		MemberAccessContext _localctx = new MemberAccessContext(Context, State);
		EnterRule(_localctx, 48, RULE_memberAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			Match(DOT);
			State = 470;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallArgsListContext callArgsList() {
			return GetRuleContext<CallArgsListContext>(0);
		}
		public CallArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterCallArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitCallArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallArgsContext callArgs() {
		CallArgsContext _localctx = new CallArgsContext(Context, State);
		EnterRule(_localctx, 50, RULE_callArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			Match(OPEN_PAREN);
			State = 474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2170735165348544540L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 3861L) != 0)) {
				{
				State = 473;
				callArgsList();
				}
			}

			State = 476;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallArgContext[] callArg() {
			return GetRuleContexts<CallArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallArgContext callArg(int i) {
			return GetRuleContext<CallArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public CallArgsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArgsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterCallArgsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitCallArgsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallArgsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallArgsListContext callArgsList() {
		CallArgsListContext _localctx = new CallArgsListContext(Context, State);
		EnterRule(_localctx, 52, RULE_callArgsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			callArg();
			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 479;
				Match(COMMA);
				State = 480;
				callArg();
				}
				}
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(bhlParser.VARIADIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(bhlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(bhlParser.REF, 0); }
		public CallArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterCallArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitCallArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallArgContext callArg() {
		CallArgContext _localctx = new CallArgContext(Context, State);
		EnterRule(_localctx, 54, RULE_callArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIADIC) {
				{
				State = 486;
				Match(VARIADIC);
				}
			}

			State = 491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 489;
				Match(NAME);
				State = 490;
				Match(COLON);
				}
				break;
			}
			State = 494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REF) {
				{
				State = 493;
				Match(REF);
				}
			}

			State = 496;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(bhlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(bhlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 56, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			Match(OPEN_BRACE);
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5476377150111152032L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 21L) != 0)) {
				{
				{
				State = 499;
				statement();
				}
				}
				State = 504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 505;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(bhlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NsNameContext[] nsName() {
			return GetRuleContexts<NsNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NsNameContext nsName(int i) {
			return GetRuleContext<NsNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public ExtensionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExtensions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExtensions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionsContext extensions() {
		ExtensionsContext _localctx = new ExtensionsContext(Context, State);
		EnterRule(_localctx, 58, RULE_extensions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(COLON);
			State = 508;
			nsName();
			State = 513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 509;
				Match(COMMA);
				State = 510;
				nsName();
				}
				}
				State = 515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NsDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(bhlParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DotNameContext dotName() {
			return GetRuleContext<DotNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(bhlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(bhlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public NsDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nsDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterNsDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitNsDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNsDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NsDeclContext nsDecl() {
		NsDeclContext _localctx = new NsDeclContext(Context, State);
		EnterRule(_localctx, 60, RULE_nsDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			Match(NAMESPACE);
			State = 517;
			dotName();
			State = 518;
			Match(OPEN_BRACE);
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & 4501125726719L) != 0)) {
				{
				{
				State = 519;
				decl();
				}
				}
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 525;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(bhlParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBlockContext classBlock() {
			return GetRuleContext<ClassBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionsContext extensions() {
			return GetRuleContext<ExtensionsContext>(0);
		}
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 62, RULE_classDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			Match(CLASS);
			State = 528;
			Match(NAME);
			State = 530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 529;
				extensions();
				}
			}

			State = 532;
			classBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(bhlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassMembersContext classMembers() {
			return GetRuleContext<ClassMembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(bhlParser.CLOSE_BRACE, 0); }
		public ClassBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterClassBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitClassBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBlockContext classBlock() {
		ClassBlockContext _localctx = new ClassBlockContext(Context, State);
		EnterRule(_localctx, 64, RULE_classBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			Match(OPEN_BRACE);
			State = 535;
			classMembers();
			State = 536;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberContext[] classMember() {
			return GetRuleContexts<ClassMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberContext classMember(int i) {
			return GetRuleContext<ClassMemberContext>(i);
		}
		public ClassMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMembers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterClassMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitClassMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMembers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMembersContext classMembers() {
		ClassMembersContext _localctx = new ClassMembersContext(Context, State);
		EnterRule(_localctx, 66, RULE_classMembers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & 2250562863359L) != 0)) {
				{
				{
				State = 538;
				classMember();
				}
				}
				State = 543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FldAttribsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(bhlParser.STATIC, 0); }
		public FldAttribsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fldAttribs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFldAttribs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFldAttribs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFldAttribs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FldAttribsContext fldAttribs() {
		FldAttribsContext _localctx = new FldAttribsContext(Context, State);
		EnterRule(_localctx, 68, RULE_fldAttribs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			Match(STATIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FldDeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareContext varDeclare() {
			return GetRuleContext<VarDeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FldAttribsContext[] fldAttribs() {
			return GetRuleContexts<FldAttribsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FldAttribsContext fldAttribs(int i) {
			return GetRuleContext<FldAttribsContext>(i);
		}
		public FldDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fldDeclare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFldDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFldDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFldDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FldDeclareContext fldDeclare() {
		FldDeclareContext _localctx = new FldDeclareContext(Context, State);
		EnterRule(_localctx, 70, RULE_fldDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STATIC) {
				{
				{
				State = 546;
				fldAttribs();
				}
				}
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 552;
			varDeclare();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FldDeclareContext fldDeclare() {
			return GetRuleContext<FldDeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl() {
			return GetRuleContext<FuncDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl() {
			return GetRuleContext<ClassDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclContext enumDecl() {
			return GetRuleContext<EnumDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclContext interfaceDecl() {
			return GetRuleContext<InterfaceDeclContext>(0);
		}
		public ClassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterClassMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitClassMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberContext classMember() {
		ClassMemberContext _localctx = new ClassMemberContext(Context, State);
		EnterRule(_localctx, 72, RULE_classMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 554;
				fldDeclare();
				}
				break;
			case 2:
				{
				State = 555;
				funcDecl();
				}
				break;
			case 3:
				{
				State = 556;
				classDecl();
				}
				break;
			case 4:
				{
				State = 557;
				enumDecl();
				}
				break;
			case 5:
				{
				State = 558;
				interfaceDecl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(bhlParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBlockContext interfaceBlock() {
			return GetRuleContext<InterfaceBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionsContext extensions() {
			return GetRuleContext<ExtensionsContext>(0);
		}
		public InterfaceDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclContext interfaceDecl() {
		InterfaceDeclContext _localctx = new InterfaceDeclContext(Context, State);
		EnterRule(_localctx, 74, RULE_interfaceDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			Match(INTERFACE);
			State = 562;
			Match(NAME);
			State = 564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 563;
				extensions();
				}
			}

			State = 566;
			interfaceBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(bhlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMembersContext interfaceMembers() {
			return GetRuleContext<InterfaceMembersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(bhlParser.CLOSE_BRACE, 0); }
		public InterfaceBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBlockContext interfaceBlock() {
		InterfaceBlockContext _localctx = new InterfaceBlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_interfaceBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			Match(OPEN_BRACE);
			State = 569;
			interfaceMembers();
			State = 570;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMembersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMemberContext[] interfaceMember() {
			return GetRuleContexts<InterfaceMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMemberContext interfaceMember(int i) {
			return GetRuleContext<InterfaceMemberContext>(i);
		}
		public InterfaceMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMembers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMembers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMembers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMembersContext interfaceMembers() {
		InterfaceMembersContext _localctx = new InterfaceMembersContext(Context, State);
		EnterRule(_localctx, 78, RULE_interfaceMembers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CORO || _la==FUNC) {
				{
				{
				State = 572;
				interfaceMember();
				}
				}
				State = 577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceFuncDeclContext interfaceFuncDecl() {
			return GetRuleContext<InterfaceFuncDeclContext>(0);
		}
		public InterfaceMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberContext interfaceMember() {
		InterfaceMemberContext _localctx = new InterfaceMemberContext(Context, State);
		EnterRule(_localctx, 80, RULE_interfaceMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			interfaceFuncDecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(bhlParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBlockContext enumBlock() {
			return GetRuleContext<EnumBlockContext>(0);
		}
		public EnumDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterEnumDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitEnumDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclContext enumDecl() {
		EnumDeclContext _localctx = new EnumDeclContext(Context, State);
		EnterRule(_localctx, 82, RULE_enumDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			Match(ENUM);
			State = 581;
			Match(NAME);
			State = 582;
			enumBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(bhlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(bhlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		public EnumBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterEnumBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitEnumBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBlockContext enumBlock() {
		EnumBlockContext _localctx = new EnumBlockContext(Context, State);
		EnterRule(_localctx, 84, RULE_enumBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			Match(OPEN_BRACE);
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 585;
				enumMember();
				}
				}
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 590;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(bhlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(bhlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(bhlParser.MINUS, 0); }
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterEnumMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitEnumMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(Context, State);
		EnterRule(_localctx, 86, RULE_enumMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			Match(NAME);
			State = 593;
			Match(ASSIGN);
			State = 595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 594;
				Match(MINUS);
				}
			}

			State = 597;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncAttribsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORO() { return GetToken(bhlParser.CORO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(bhlParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(bhlParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(bhlParser.STATIC, 0); }
		public FuncAttribsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcAttribs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFuncAttribs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFuncAttribs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncAttribs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncAttribsContext funcAttribs() {
		FuncAttribsContext _localctx = new FuncAttribsContext(Context, State);
		EnterRule(_localctx, 88, RULE_funcAttribs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2013265920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(bhlParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncBlockContext funcBlock() {
			return GetRuleContext<FuncBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncAttribsContext[] funcAttribs() {
			return GetRuleContexts<FuncAttribsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncAttribsContext funcAttribs(int i) {
			return GetRuleContext<FuncAttribsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetTypeContext retType() {
			return GetRuleContext<RetTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamsContext funcParams() {
			return GetRuleContext<FuncParamsContext>(0);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 90, RULE_funcDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2013265920L) != 0)) {
				{
				{
				State = 601;
				funcAttribs();
				}
				}
				State = 606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 607;
			Match(FUNC);
			State = 609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 608;
				retType();
				}
				break;
			}
			State = 611;
			Match(NAME);
			State = 612;
			Match(OPEN_PAREN);
			State = 614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 36238786567L) != 0)) {
				{
				State = 613;
				funcParams();
				}
			}

			State = 616;
			Match(CLOSE_PAREN);
			State = 617;
			funcBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(bhlParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORO() { return GetToken(bhlParser.CORO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RetTypeContext retType() {
			return GetRuleContext<RetTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypesContext types() {
			return GetRuleContext<TypesContext>(0);
		}
		public FuncTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFuncType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFuncType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncTypeContext funcType() {
		FuncTypeContext _localctx = new FuncTypeContext(Context, State);
		EnterRule(_localctx, 92, RULE_funcType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CORO) {
				{
				State = 619;
				Match(CORO);
				}
			}

			State = 622;
			Match(FUNC);
			State = 624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 35165044739L) != 0)) {
				{
				State = 623;
				retType();
				}
			}

			State = 626;
			Match(OPEN_PAREN);
			State = 628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 35165044743L) != 0)) {
				{
				State = 627;
				types();
				}
			}

			State = 630;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FuncBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFuncBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFuncBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncBlockContext funcBlock() {
		FuncBlockContext _localctx = new FuncBlockContext(Context, State);
		EnterRule(_localctx, 94, RULE_funcBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceFuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(bhlParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORO() { return GetToken(bhlParser.CORO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RetTypeContext retType() {
			return GetRuleContext<RetTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamsContext funcParams() {
			return GetRuleContext<FuncParamsContext>(0);
		}
		public InterfaceFuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceFuncDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterInterfaceFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitInterfaceFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceFuncDeclContext interfaceFuncDecl() {
		InterfaceFuncDeclContext _localctx = new InterfaceFuncDeclContext(Context, State);
		EnterRule(_localctx, 96, RULE_interfaceFuncDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CORO) {
				{
				State = 634;
				Match(CORO);
				}
			}

			State = 637;
			Match(FUNC);
			State = 639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 638;
				retType();
				}
				break;
			}
			State = 641;
			Match(NAME);
			State = 642;
			Match(OPEN_PAREN);
			State = 644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 36238786567L) != 0)) {
				{
				State = 643;
				funcParams();
				}
			}

			State = 646;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncLambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(bhlParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(bhlParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(bhlParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncBlockContext funcBlock() {
			return GetRuleContext<FuncBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORO() { return GetToken(bhlParser.CORO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RetTypeContext retType() {
			return GetRuleContext<RetTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamsContext funcParams() {
			return GetRuleContext<FuncParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaptureListContext captureList() {
			return GetRuleContext<CaptureListContext>(0);
		}
		public FuncLambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcLambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFuncLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFuncLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncLambdaContext funcLambda() {
		FuncLambdaContext _localctx = new FuncLambdaContext(Context, State);
		EnterRule(_localctx, 98, RULE_funcLambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CORO) {
				{
				State = 648;
				Match(CORO);
				}
			}

			State = 651;
			Match(FUNC);
			State = 653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 35165044739L) != 0)) {
				{
				State = 652;
				retType();
				}
			}

			State = 655;
			Match(OPEN_PAREN);
			State = 657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 36238786567L) != 0)) {
				{
				State = 656;
				funcParams();
				}
			}

			State = 659;
			Match(CLOSE_PAREN);
			State = 661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 660;
				captureList();
				}
			}

			State = 663;
			funcBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(bhlParser.REF, 0); }
		public RefTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterRefType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitRefType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefTypeContext refType() {
		RefTypeContext _localctx = new RefTypeContext(Context, State);
		EnterRule(_localctx, 100, RULE_refType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REF) {
				{
				State = 665;
				Match(REF);
				}
			}

			State = 668;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public RetTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterRetType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitRetType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetTypeContext retType() {
		RetTypeContext _localctx = new RetTypeContext(Context, State);
		EnterRule(_localctx, 102, RULE_retType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			type();
			State = 675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 671;
				Match(COMMA);
				State = 672;
				type();
				}
				}
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(bhlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(bhlParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(bhlParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(bhlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public CaptureListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_captureList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterCaptureList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitCaptureList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaptureList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaptureListContext captureList() {
		CaptureListContext _localctx = new CaptureListContext(Context, State);
		EnterRule(_localctx, 104, RULE_captureList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(OPEN_BRACKET);
			State = 679;
			Match(NAME);
			State = 684;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 680;
				Match(COMMA);
				State = 681;
				Match(NAME);
				}
				}
				State = 686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 687;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeContext[] refType() {
			return GetRuleContexts<RefTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefTypeContext refType(int i) {
			return GetRuleContext<RefTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public TypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_types; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypesContext types() {
		TypesContext _localctx = new TypesContext(Context, State);
		EnterRule(_localctx, 106, RULE_types);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			refType();
			State = 694;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 690;
				Match(COMMA);
				State = 691;
				refType();
				}
				}
				State = 696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamDeclareContext[] funcParamDeclare() {
			return GetRuleContexts<FuncParamDeclareContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamDeclareContext funcParamDeclare(int i) {
			return GetRuleContext<FuncParamDeclareContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public FuncParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFuncParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFuncParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamsContext funcParams() {
		FuncParamsContext _localctx = new FuncParamsContext(Context, State);
		EnterRule(_localctx, 108, RULE_funcParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			funcParamDeclare();
			State = 702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 698;
				Match(COMMA);
				State = 699;
				funcParamDeclare();
				}
				}
				State = 704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamDeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(bhlParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(bhlParser.VARIADIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		public FuncParamDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParamDeclare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterFuncParamDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitFuncParamDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParamDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamDeclareContext funcParamDeclare() {
		FuncParamDeclareContext _localctx = new FuncParamDeclareContext(Context, State);
		EnterRule(_localctx, 110, RULE_funcParamDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REF) {
				{
				State = 705;
				Match(REF);
				}
			}

			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIADIC) {
				{
				State = 708;
				Match(VARIADIC);
				}
			}

			State = 711;
			type();
			State = 712;
			Match(NAME);
			State = 714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 713;
				assignExp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public VarDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterVarDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitVarDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclareContext varDeclare() {
		VarDeclareContext _localctx = new VarDeclareContext(Context, State);
		EnterRule(_localctx, 112, RULE_varDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			type();
			State = 717;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclareListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareContext[] varDeclare() {
			return GetRuleContexts<VarDeclareContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareContext varDeclare(int i) {
			return GetRuleContext<VarDeclareContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public VarDeclareListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclareList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterVarDeclareList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitVarDeclareList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclareList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclareListContext varDeclareList() {
		VarDeclareListContext _localctx = new VarDeclareListContext(Context, State);
		EnterRule(_localctx, 114, RULE_varDeclareList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			varDeclare();
			State = 724;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 720;
					Match(COMMA);
					State = 721;
					varDeclare();
					}
					} 
				}
				State = 726;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclareOptAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareContext varDeclare() {
			return GetRuleContext<VarDeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(bhlParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		public VarDeclareOptAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclareOptAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterVarDeclareOptAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitVarDeclareOptAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclareOptAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclareOptAssignContext varDeclareOptAssign() {
		VarDeclareOptAssignContext _localctx = new VarDeclareOptAssignContext(Context, State);
		EnterRule(_localctx, 116, RULE_varDeclareOptAssign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATIC) {
				{
				State = 727;
				Match(STATIC);
				}
			}

			State = 730;
			varDeclare();
			State = 732;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 731;
				assignExp();
				}
				break;
			}
			State = 734;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrDeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareContext varDeclare() {
			return GetRuleContext<VarDeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		public VarOrDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrDeclare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterVarOrDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitVarOrDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrDeclareContext varOrDeclare() {
		VarOrDeclareContext _localctx = new VarOrDeclareContext(Context, State);
		EnterRule(_localctx, 118, RULE_varOrDeclare);
		try {
			State = 738;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 736;
				varDeclare();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 737;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrDeclareAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrDeclareContext varOrDeclare() {
			return GetRuleContext<VarOrDeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		public VarOrDeclareAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrDeclareAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterVarOrDeclareAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitVarOrDeclareAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrDeclareAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrDeclareAssignContext varOrDeclareAssign() {
		VarOrDeclareAssignContext _localctx = new VarOrDeclareAssignContext(Context, State);
		EnterRule(_localctx, 120, RULE_varOrDeclareAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			varOrDeclare();
			State = 741;
			assignExp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclareOrChainExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareContext varDeclare() {
			return GetRuleContext<VarDeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpContext chainExp() {
			return GetRuleContext<ChainExpContext>(0);
		}
		public VarDeclareOrChainExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclareOrChainExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterVarDeclareOrChainExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitVarDeclareOrChainExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclareOrChainExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclareOrChainExpContext varDeclareOrChainExp() {
		VarDeclareOrChainExpContext _localctx = new VarDeclareOrChainExpContext(Context, State);
		EnterRule(_localctx, 122, RULE_varDeclareOrChainExp);
		try {
			State = 745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 743;
				varDeclare();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 744;
				chainExp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclaresOrChainExpsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareOrChainExpContext[] varDeclareOrChainExp() {
			return GetRuleContexts<VarDeclareOrChainExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclareOrChainExpContext varDeclareOrChainExp(int i) {
			return GetRuleContext<VarDeclareOrChainExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		public VarDeclaresOrChainExpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaresOrChainExps; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterVarDeclaresOrChainExps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitVarDeclaresOrChainExps(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclaresOrChainExps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclaresOrChainExpsContext varDeclaresOrChainExps() {
		VarDeclaresOrChainExpsContext _localctx = new VarDeclaresOrChainExpsContext(Context, State);
		EnterRule(_localctx, 124, RULE_varDeclaresOrChainExps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747;
			varDeclareOrChainExp();
			State = 752;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 748;
				Match(COMMA);
				State = 749;
				varDeclareOrChainExp();
				}
				}
				State = 754;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifyOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignExpContext assignExp() {
			return GetRuleContext<AssignExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorIncDecContext operatorIncDec() {
			return GetRuleContext<OperatorIncDecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorSelfOpContext operatorSelfOp() {
			return GetRuleContext<OperatorSelfOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ModifyOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifyOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterModifyOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitModifyOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifyOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifyOpContext modifyOp() {
		ModifyOpContext _localctx = new ModifyOpContext(Context, State);
		EnterRule(_localctx, 126, RULE_modifyOp);
		try {
			State = 760;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 755;
				assignExp();
				}
				break;
			case INC:
			case DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 756;
				operatorIncDec();
				}
				break;
			case SINC:
			case SDEC:
			case SMUL:
			case SDIV:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 757;
				operatorSelfOp();
				State = 758;
				exp(0);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpModifyOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChainExpContext chainExp() {
			return GetRuleContext<ChainExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifyOpContext modifyOp() {
			return GetRuleContext<ModifyOpContext>(0);
		}
		public ExpModifyOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expModifyOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterExpModifyOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitExpModifyOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpModifyOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpModifyOpContext expModifyOp() {
		ExpModifyOpContext _localctx = new ExpModifyOpContext(Context, State);
		EnterRule(_localctx, 128, RULE_expModifyOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 762;
			chainExp();
			State = 763;
			modifyOp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(bhlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public AssignExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterAssignExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitAssignExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignExpContext assignExp() {
		AssignExpContext _localctx = new AssignExpContext(Context, State);
		EnterRule(_localctx, 130, RULE_assignExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			Match(ASSIGN);
			State = 766;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOR() { return GetToken(bhlParser.BOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAND() { return GetToken(bhlParser.BAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHR() { return GetToken(bhlParser.SHR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHL() { return GetToken(bhlParser.SHL, 0); }
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(Context, State);
		EnterRule(_localctx, 132, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 927712935936L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorIncDecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(bhlParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(bhlParser.DEC, 0); }
		public OperatorIncDecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorIncDec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterOperatorIncDec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitOperatorIncDec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorIncDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorIncDecContext operatorIncDec() {
		OperatorIncDecContext _localctx = new OperatorIncDecContext(Context, State);
		EnterRule(_localctx, 134, RULE_operatorIncDec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			_la = TokenStream.LA(1);
			if ( !(_la==INC || _la==DEC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorSelfOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINC() { return GetToken(bhlParser.SINC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SDEC() { return GetToken(bhlParser.SDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMUL() { return GetToken(bhlParser.SMUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SDIV() { return GetToken(bhlParser.SDIV, 0); }
		public OperatorSelfOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorSelfOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterOperatorSelfOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitOperatorSelfOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorSelfOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorSelfOpContext operatorSelfOp() {
		OperatorSelfOpContext _localctx = new OperatorSelfOpContext(Context, State);
		EnterRule(_localctx, 136, RULE_operatorSelfOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 65970697666560L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(bhlParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(bhlParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(bhlParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(bhlParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(bhlParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(bhlParser.EQ, 0); }
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(Context, State);
		EnterRule(_localctx, 138, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 774;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4433230883192832L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(bhlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(bhlParser.MINUS, 0); }
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
		EnterRule(_localctx, 140, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(bhlParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(bhlParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(bhlParser.MOD, 0); }
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(Context, State);
		EnterRule(_localctx, 142, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126100789566373888L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(bhlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(bhlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BNOT() { return GetToken(bhlParser.BNOT, 0); }
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(Context, State);
		EnterRule(_localctx, 144, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 153122524769550336L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(bhlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(bhlParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(bhlParser.FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 146, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALSTRING() { return GetToken(bhlParser.NORMALSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 148, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			Match(NORMALSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(bhlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonPairContext[] jsonPair() {
			return GetRuleContexts<JsonPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonPairContext jsonPair(int i) {
			return GetRuleContext<JsonPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(bhlParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonEmptyObjContext jsonEmptyObj() {
			return GetRuleContext<JsonEmptyObjContext>(0);
		}
		public JsonObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterJsonObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitJsonObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonObjectContext jsonObject() {
		JsonObjectContext _localctx = new JsonObjectContext(Context, State);
		EnterRule(_localctx, 150, RULE_jsonObject);
		int _la;
		try {
			State = 798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 786;
				Match(OPEN_BRACE);
				State = 787;
				jsonPair();
				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 788;
					Match(COMMA);
					State = 789;
					jsonPair();
					}
					}
					State = 794;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 795;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 797;
				jsonEmptyObj();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonEmptyObjContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(bhlParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(bhlParser.CLOSE_BRACE, 0); }
		public JsonEmptyObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonEmptyObj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterJsonEmptyObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitJsonEmptyObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonEmptyObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonEmptyObjContext jsonEmptyObj() {
		JsonEmptyObjContext _localctx = new JsonEmptyObjContext(Context, State);
		EnterRule(_localctx, 152, RULE_jsonEmptyObj);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			Match(OPEN_BRACE);
			State = 801;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(bhlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(bhlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public JsonPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterJsonPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitJsonPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonPairContext jsonPair() {
		JsonPairContext _localctx = new JsonPairContext(Context, State);
		EnterRule(_localctx, 154, RULE_jsonPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			Match(NAME);
			State = 804;
			Match(COLON);
			State = 805;
			jsonValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(bhlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueContext[] jsonValue() {
			return GetRuleContexts<JsonValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueContext jsonValue(int i) {
			return GetRuleContext<JsonValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(bhlParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bhlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bhlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonEmptyArrContext jsonEmptyArr() {
			return GetRuleContext<JsonEmptyArrContext>(0);
		}
		public JsonArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterJsonArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitJsonArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonArrayContext jsonArray() {
		JsonArrayContext _localctx = new JsonArrayContext(Context, State);
		EnterRule(_localctx, 156, RULE_jsonArray);
		int _la;
		try {
			State = 819;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 807;
				Match(OPEN_BRACKET);
				State = 808;
				jsonValue();
				State = 813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 809;
					Match(COMMA);
					State = 810;
					jsonValue();
					}
					}
					State = 815;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 816;
				Match(CLOSE_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 818;
				jsonEmptyArr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonEmptyArrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(bhlParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(bhlParser.CLOSE_BRACKET, 0); }
		public JsonEmptyArrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonEmptyArr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterJsonEmptyArr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitJsonEmptyArr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonEmptyArr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonEmptyArrContext jsonEmptyArr() {
		JsonEmptyArrContext _localctx = new JsonEmptyArrContext(Context, State);
		EnterRule(_localctx, 158, RULE_jsonEmptyArr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			Match(OPEN_BRACKET);
			State = 822;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public JsonValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterJsonValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitJsonValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueContext jsonValue() {
		JsonValueContext _localctx = new JsonValueContext(Context, State);
		EnterRule(_localctx, 160, RULE_jsonValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(bhlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(bhlParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IbhlParserListener typedListener = listener as IbhlParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbhlParserVisitor<TResult> typedVisitor = visitor as IbhlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 162, RULE_eos);
		try {
			State = 830;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 826;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 827;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 828;
				if (!(this.lineTerminator())) throw new FailedPredicateException(this, "this.lineTerminator()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 829;
				if (!(this.closeBrace())) throw new FailedPredicateException(this, "this.closeBrace()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return exp_sempred((ExpContext)_localctx, predIndex);
		case 14: return newExp_sempred((NewExpContext)_localctx, predIndex);
		case 19: return statement_sempred((StatementContext)_localctx, predIndex);
		case 23: return arrAccess_sempred((ArrAccessContext)_localctx, predIndex);
		case 81: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 2);
		}
		return true;
	}
	private bool newExp_sempred(NewExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return this.notLineTerminator();
		}
		return true;
	}
	private bool statement_sempred(StatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return this.notLineTerminator();
		case 11: return this.notLineTerminator();
		}
		return true;
	}
	private bool arrAccess_sempred(ArrAccessContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return this.notLineTerminator();
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return this.lineTerminator();
		case 14: return this.closeBrace();
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,80,833,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,1,0,5,0,166,8,0,10,0,12,0,169,
		9,0,1,0,1,0,1,1,1,1,3,1,175,8,1,1,2,1,2,1,2,5,2,180,8,2,10,2,12,2,183,
		9,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,191,8,3,1,4,1,4,5,4,195,8,4,10,4,12,4,
		198,9,4,1,5,3,5,201,8,5,1,5,1,5,1,6,1,6,3,6,207,8,6,1,6,1,6,3,6,211,8,
		6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,5,9,223,8,9,10,9,12,9,226,9,
		9,1,10,3,10,229,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,239,
		8,11,1,11,5,11,242,8,11,10,11,12,11,245,9,11,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,273,8,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,305,8,12,
		10,12,12,12,308,9,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
		3,14,320,8,14,1,15,1,15,1,15,1,15,5,15,326,8,15,10,15,12,15,329,9,15,1,
		15,1,15,1,15,1,15,1,16,1,16,1,16,5,16,338,8,16,10,16,12,16,341,9,16,1,
		17,1,17,1,17,5,17,346,8,17,10,17,12,17,349,9,17,1,18,1,18,3,18,353,8,18,
		1,18,1,18,1,18,1,18,3,18,359,8,18,1,18,1,18,1,19,1,19,1,19,1,19,3,19,367,
		8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,391,8,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,5,19,401,8,19,10,19,12,19,404,9,19,1,19,3,
		19,407,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,3,19,438,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,
		19,448,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,
		1,22,3,22,463,8,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,3,
		25,475,8,25,1,25,1,25,1,26,1,26,1,26,5,26,482,8,26,10,26,12,26,485,9,26,
		1,27,3,27,488,8,27,1,27,1,27,3,27,492,8,27,1,27,3,27,495,8,27,1,27,1,27,
		1,28,1,28,5,28,501,8,28,10,28,12,28,504,9,28,1,28,1,28,1,29,1,29,1,29,
		1,29,5,29,512,8,29,10,29,12,29,515,9,29,1,30,1,30,1,30,1,30,5,30,521,8,
		30,10,30,12,30,524,9,30,1,30,1,30,1,31,1,31,1,31,3,31,531,8,31,1,31,1,
		31,1,32,1,32,1,32,1,32,1,33,5,33,540,8,33,10,33,12,33,543,9,33,1,34,1,
		34,1,35,5,35,548,8,35,10,35,12,35,551,9,35,1,35,1,35,1,36,1,36,1,36,1,
		36,1,36,3,36,560,8,36,1,37,1,37,1,37,3,37,565,8,37,1,37,1,37,1,38,1,38,
		1,38,1,38,1,39,5,39,574,8,39,10,39,12,39,577,9,39,1,40,1,40,1,41,1,41,
		1,41,1,41,1,42,1,42,4,42,587,8,42,11,42,12,42,588,1,42,1,42,1,43,1,43,
		1,43,3,43,596,8,43,1,43,1,43,1,44,1,44,1,45,5,45,603,8,45,10,45,12,45,
		606,9,45,1,45,1,45,3,45,610,8,45,1,45,1,45,1,45,3,45,615,8,45,1,45,1,45,
		1,45,1,46,3,46,621,8,46,1,46,1,46,3,46,625,8,46,1,46,1,46,3,46,629,8,46,
		1,46,1,46,1,47,1,47,1,48,3,48,636,8,48,1,48,1,48,3,48,640,8,48,1,48,1,
		48,1,48,3,48,645,8,48,1,48,1,48,1,49,3,49,650,8,49,1,49,1,49,3,49,654,
		8,49,1,49,1,49,3,49,658,8,49,1,49,1,49,3,49,662,8,49,1,49,1,49,1,50,3,
		50,667,8,50,1,50,1,50,1,51,1,51,1,51,5,51,674,8,51,10,51,12,51,677,9,51,
		1,52,1,52,1,52,1,52,5,52,683,8,52,10,52,12,52,686,9,52,1,52,1,52,1,53,
		1,53,1,53,5,53,693,8,53,10,53,12,53,696,9,53,1,54,1,54,1,54,5,54,701,8,
		54,10,54,12,54,704,9,54,1,55,3,55,707,8,55,1,55,3,55,710,8,55,1,55,1,55,
		1,55,3,55,715,8,55,1,56,1,56,1,56,1,57,1,57,1,57,5,57,723,8,57,10,57,12,
		57,726,9,57,1,58,3,58,729,8,58,1,58,1,58,3,58,733,8,58,1,58,1,58,1,59,
		1,59,3,59,739,8,59,1,60,1,60,1,60,1,61,1,61,3,61,746,8,61,1,62,1,62,1,
		62,5,62,751,8,62,10,62,12,62,754,9,62,1,63,1,63,1,63,1,63,1,63,3,63,761,
		8,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,
		1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,75,
		1,75,5,75,791,8,75,10,75,12,75,794,9,75,1,75,1,75,1,75,3,75,799,8,75,1,
		76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,5,78,812,8,78,10,
		78,12,78,815,9,78,1,78,1,78,1,78,3,78,820,8,78,1,79,1,79,1,79,1,80,1,80,
		1,81,1,81,1,81,1,81,3,81,831,8,81,1,81,0,1,24,82,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
		110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
		146,148,150,152,154,156,158,160,162,0,9,1,0,27,30,2,0,35,36,38,39,1,0,
		40,41,1,0,42,45,1,0,46,51,1,0,52,53,1,0,54,56,3,0,37,37,53,53,57,57,1,
		0,74,76,877,0,167,1,0,0,0,2,174,1,0,0,0,4,176,1,0,0,0,6,190,1,0,0,0,8,
		192,1,0,0,0,10,200,1,0,0,0,12,206,1,0,0,0,14,212,1,0,0,0,16,215,1,0,0,
		0,18,219,1,0,0,0,20,228,1,0,0,0,22,238,1,0,0,0,24,272,1,0,0,0,26,309,1,
		0,0,0,28,314,1,0,0,0,30,321,1,0,0,0,32,334,1,0,0,0,34,342,1,0,0,0,36,350,
		1,0,0,0,38,447,1,0,0,0,40,449,1,0,0,0,42,456,1,0,0,0,44,462,1,0,0,0,46,
		464,1,0,0,0,48,469,1,0,0,0,50,472,1,0,0,0,52,478,1,0,0,0,54,487,1,0,0,
		0,56,498,1,0,0,0,58,507,1,0,0,0,60,516,1,0,0,0,62,527,1,0,0,0,64,534,1,
		0,0,0,66,541,1,0,0,0,68,544,1,0,0,0,70,549,1,0,0,0,72,559,1,0,0,0,74,561,
		1,0,0,0,76,568,1,0,0,0,78,575,1,0,0,0,80,578,1,0,0,0,82,580,1,0,0,0,84,
		584,1,0,0,0,86,592,1,0,0,0,88,599,1,0,0,0,90,604,1,0,0,0,92,620,1,0,0,
		0,94,632,1,0,0,0,96,635,1,0,0,0,98,649,1,0,0,0,100,666,1,0,0,0,102,670,
		1,0,0,0,104,678,1,0,0,0,106,689,1,0,0,0,108,697,1,0,0,0,110,706,1,0,0,
		0,112,716,1,0,0,0,114,719,1,0,0,0,116,728,1,0,0,0,118,738,1,0,0,0,120,
		740,1,0,0,0,122,745,1,0,0,0,124,747,1,0,0,0,126,760,1,0,0,0,128,762,1,
		0,0,0,130,765,1,0,0,0,132,768,1,0,0,0,134,770,1,0,0,0,136,772,1,0,0,0,
		138,774,1,0,0,0,140,776,1,0,0,0,142,778,1,0,0,0,144,780,1,0,0,0,146,782,
		1,0,0,0,148,784,1,0,0,0,150,798,1,0,0,0,152,800,1,0,0,0,154,803,1,0,0,
		0,156,819,1,0,0,0,158,821,1,0,0,0,160,824,1,0,0,0,162,830,1,0,0,0,164,
		166,3,2,1,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,
		0,0,0,168,170,1,0,0,0,169,167,1,0,0,0,170,171,5,0,0,1,171,1,1,0,0,0,172,
		175,3,6,3,0,173,175,3,4,2,0,174,172,1,0,0,0,174,173,1,0,0,0,175,3,1,0,
		0,0,176,177,5,1,0,0,177,181,5,73,0,0,178,180,5,62,0,0,179,178,1,0,0,0,
		180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,5,1,0,0,0,183,181,
		1,0,0,0,184,191,3,60,30,0,185,191,3,62,31,0,186,191,3,74,37,0,187,191,
		3,90,45,0,188,191,3,116,58,0,189,191,3,82,41,0,190,184,1,0,0,0,190,185,
		1,0,0,0,190,186,1,0,0,0,190,187,1,0,0,0,190,188,1,0,0,0,190,189,1,0,0,
		0,191,7,1,0,0,0,192,196,5,58,0,0,193,195,3,48,24,0,194,193,1,0,0,0,195,
		198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,9,1,0,0,0,198,196,1,0,
		0,0,199,201,5,59,0,0,200,199,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,202,
		203,3,8,4,0,203,11,1,0,0,0,204,207,3,14,7,0,205,207,3,16,8,0,206,204,1,
		0,0,0,206,205,1,0,0,0,206,207,1,0,0,0,207,210,1,0,0,0,208,211,3,10,5,0,
		209,211,3,92,46,0,210,208,1,0,0,0,210,209,1,0,0,0,211,13,1,0,0,0,212,213,
		5,65,0,0,213,214,5,66,0,0,214,15,1,0,0,0,215,216,5,65,0,0,216,217,3,10,
		5,0,217,218,5,66,0,0,218,17,1,0,0,0,219,224,3,24,12,0,220,221,5,71,0,0,
		221,223,3,24,12,0,222,220,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,
		225,1,0,0,0,225,19,1,0,0,0,226,224,1,0,0,0,227,229,5,59,0,0,228,227,1,
		0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,231,5,58,0,0,231,21,1,0,0,0,
		232,239,3,20,10,0,233,234,5,67,0,0,234,235,3,24,12,0,235,236,5,68,0,0,
		236,239,1,0,0,0,237,239,3,98,49,0,238,232,1,0,0,0,238,233,1,0,0,0,238,
		237,1,0,0,0,239,243,1,0,0,0,240,242,3,44,22,0,241,240,1,0,0,0,242,245,
		1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,23,1,0,0,0,245,243,1,0,0,0,
		246,247,6,12,-1,0,247,273,5,2,0,0,248,273,5,3,0,0,249,273,5,4,0,0,250,
		273,3,146,73,0,251,273,3,148,74,0,252,253,5,67,0,0,253,254,3,12,6,0,254,
		255,5,68,0,0,255,256,3,24,12,18,256,273,1,0,0,0,257,273,3,22,11,0,258,
		273,3,98,49,0,259,260,5,18,0,0,260,261,5,67,0,0,261,262,3,12,6,0,262,263,
		5,68,0,0,263,273,1,0,0,0,264,273,3,150,75,0,265,273,3,156,78,0,266,267,
		5,15,0,0,267,273,3,22,11,0,268,269,3,144,72,0,269,270,3,24,12,9,270,273,
		1,0,0,0,271,273,3,28,14,0,272,246,1,0,0,0,272,248,1,0,0,0,272,249,1,0,
		0,0,272,250,1,0,0,0,272,251,1,0,0,0,272,252,1,0,0,0,272,257,1,0,0,0,272,
		258,1,0,0,0,272,259,1,0,0,0,272,264,1,0,0,0,272,265,1,0,0,0,272,266,1,
		0,0,0,272,268,1,0,0,0,272,271,1,0,0,0,273,306,1,0,0,0,274,275,10,8,0,0,
		275,276,3,132,66,0,276,277,3,24,12,9,277,305,1,0,0,0,278,279,10,7,0,0,
		279,280,3,142,71,0,280,281,3,24,12,8,281,305,1,0,0,0,282,283,10,6,0,0,
		283,284,3,140,70,0,284,285,3,24,12,7,285,305,1,0,0,0,286,287,10,5,0,0,
		287,288,3,138,69,0,288,289,3,24,12,6,289,305,1,0,0,0,290,291,10,4,0,0,
		291,292,5,34,0,0,292,305,3,24,12,5,293,294,10,3,0,0,294,295,5,33,0,0,295,
		305,3,24,12,4,296,297,10,11,0,0,297,298,5,16,0,0,298,305,3,12,6,0,299,
		300,10,10,0,0,300,301,5,17,0,0,301,305,3,12,6,0,302,303,10,2,0,0,303,305,
		3,26,13,0,304,274,1,0,0,0,304,278,1,0,0,0,304,282,1,0,0,0,304,286,1,0,
		0,0,304,290,1,0,0,0,304,293,1,0,0,0,304,296,1,0,0,0,304,299,1,0,0,0,304,
		302,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,25,1,0,
		0,0,308,306,1,0,0,0,309,310,5,72,0,0,310,311,3,24,12,0,311,312,5,63,0,
		0,312,313,3,24,12,0,313,27,1,0,0,0,314,315,5,19,0,0,315,319,3,12,6,0,316,
		320,3,150,75,0,317,318,4,14,9,0,318,320,3,156,78,0,319,316,1,0,0,0,319,
		317,1,0,0,0,319,320,1,0,0,0,320,29,1,0,0,0,321,322,5,67,0,0,322,327,3,
		118,59,0,323,324,5,71,0,0,324,326,3,118,59,0,325,323,1,0,0,0,326,329,1,
		0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,327,1,0,0,0,
		330,331,5,11,0,0,331,332,3,24,12,0,332,333,5,68,0,0,333,31,1,0,0,0,334,
		339,3,120,60,0,335,336,5,71,0,0,336,338,3,120,60,0,337,335,1,0,0,0,338,
		341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,33,1,0,0,0,341,339,1,0,
		0,0,342,347,3,128,64,0,343,344,5,71,0,0,344,346,3,128,64,0,345,343,1,0,
		0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,35,1,0,0,0,349,
		347,1,0,0,0,350,352,5,67,0,0,351,353,3,32,16,0,352,351,1,0,0,0,352,353,
		1,0,0,0,353,354,1,0,0,0,354,355,5,62,0,0,355,356,3,24,12,0,356,358,5,62,
		0,0,357,359,3,34,17,0,358,357,1,0,0,0,358,359,1,0,0,0,359,360,1,0,0,0,
		360,361,5,68,0,0,361,37,1,0,0,0,362,448,5,62,0,0,363,366,3,114,57,0,364,
		365,4,19,10,0,365,367,3,130,65,0,366,364,1,0,0,0,366,367,1,0,0,0,367,368,
		1,0,0,0,368,369,3,162,81,0,369,448,1,0,0,0,370,371,3,124,62,0,371,372,
		3,130,65,0,372,373,3,162,81,0,373,448,1,0,0,0,374,375,5,15,0,0,375,376,
		5,67,0,0,376,377,5,68,0,0,377,448,3,162,81,0,378,379,5,15,0,0,379,380,
		3,22,11,0,380,381,3,162,81,0,381,448,1,0,0,0,382,383,5,15,0,0,383,384,
		5,7,0,0,384,385,5,67,0,0,385,386,3,24,12,0,386,387,5,68,0,0,387,448,1,
		0,0,0,388,390,3,22,11,0,389,391,3,126,63,0,390,389,1,0,0,0,390,391,1,0,
		0,0,391,392,1,0,0,0,392,393,3,162,81,0,393,448,1,0,0,0,394,395,5,5,0,0,
		395,396,5,67,0,0,396,397,3,24,12,0,397,398,5,68,0,0,398,402,3,56,28,0,
		399,401,3,40,20,0,400,399,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,
		403,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,405,407,3,42,21,0,406,405,
		1,0,0,0,406,407,1,0,0,0,407,448,1,0,0,0,408,409,5,7,0,0,409,410,5,67,0,
		0,410,411,3,24,12,0,411,412,5,68,0,0,412,413,3,56,28,0,413,448,1,0,0,0,
		414,415,5,8,0,0,415,416,3,56,28,0,416,417,5,7,0,0,417,418,5,67,0,0,418,
		419,3,24,12,0,419,420,5,68,0,0,420,421,3,162,81,0,421,448,1,0,0,0,422,
		423,5,9,0,0,423,424,3,36,18,0,424,425,3,56,28,0,425,448,1,0,0,0,426,427,
		5,10,0,0,427,428,3,30,15,0,428,429,3,56,28,0,429,448,1,0,0,0,430,431,5,
		12,0,0,431,448,3,162,81,0,432,433,5,13,0,0,433,448,3,162,81,0,434,437,
		5,14,0,0,435,436,4,19,11,0,436,438,3,18,9,0,437,435,1,0,0,0,437,438,1,
		0,0,0,438,439,1,0,0,0,439,448,3,162,81,0,440,441,5,20,0,0,441,448,3,56,
		28,0,442,443,5,21,0,0,443,448,3,56,28,0,444,445,5,22,0,0,445,448,3,56,
		28,0,446,448,3,56,28,0,447,362,1,0,0,0,447,363,1,0,0,0,447,370,1,0,0,0,
		447,374,1,0,0,0,447,378,1,0,0,0,447,382,1,0,0,0,447,388,1,0,0,0,447,394,
		1,0,0,0,447,408,1,0,0,0,447,414,1,0,0,0,447,422,1,0,0,0,447,426,1,0,0,
		0,447,430,1,0,0,0,447,432,1,0,0,0,447,434,1,0,0,0,447,440,1,0,0,0,447,
		442,1,0,0,0,447,444,1,0,0,0,447,446,1,0,0,0,448,39,1,0,0,0,449,450,5,6,
		0,0,450,451,5,5,0,0,451,452,5,67,0,0,452,453,3,24,12,0,453,454,5,68,0,
		0,454,455,3,56,28,0,455,41,1,0,0,0,456,457,5,6,0,0,457,458,3,56,28,0,458,
		43,1,0,0,0,459,463,3,50,25,0,460,463,3,48,24,0,461,463,3,46,23,0,462,459,
		1,0,0,0,462,460,1,0,0,0,462,461,1,0,0,0,463,45,1,0,0,0,464,465,4,23,12,
		0,465,466,5,65,0,0,466,467,3,24,12,0,467,468,5,66,0,0,468,47,1,0,0,0,469,
		470,5,64,0,0,470,471,5,58,0,0,471,49,1,0,0,0,472,474,5,67,0,0,473,475,
		3,52,26,0,474,473,1,0,0,0,474,475,1,0,0,0,475,476,1,0,0,0,476,477,5,68,
		0,0,477,51,1,0,0,0,478,483,3,54,27,0,479,480,5,71,0,0,480,482,3,54,27,
		0,481,479,1,0,0,0,482,485,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,
		53,1,0,0,0,485,483,1,0,0,0,486,488,5,60,0,0,487,486,1,0,0,0,487,488,1,
		0,0,0,488,491,1,0,0,0,489,490,5,58,0,0,490,492,5,63,0,0,491,489,1,0,0,
		0,491,492,1,0,0,0,492,494,1,0,0,0,493,495,5,32,0,0,494,493,1,0,0,0,494,
		495,1,0,0,0,495,496,1,0,0,0,496,497,3,24,12,0,497,55,1,0,0,0,498,502,5,
		69,0,0,499,501,3,38,19,0,500,499,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,
		0,502,503,1,0,0,0,503,505,1,0,0,0,504,502,1,0,0,0,505,506,5,70,0,0,506,
		57,1,0,0,0,507,508,5,63,0,0,508,513,3,10,5,0,509,510,5,71,0,0,510,512,
		3,10,5,0,511,509,1,0,0,0,512,515,1,0,0,0,513,511,1,0,0,0,513,514,1,0,0,
		0,514,59,1,0,0,0,515,513,1,0,0,0,516,517,5,23,0,0,517,518,3,8,4,0,518,
		522,5,69,0,0,519,521,3,6,3,0,520,519,1,0,0,0,521,524,1,0,0,0,522,520,1,
		0,0,0,522,523,1,0,0,0,523,525,1,0,0,0,524,522,1,0,0,0,525,526,5,70,0,0,
		526,61,1,0,0,0,527,528,5,24,0,0,528,530,5,58,0,0,529,531,3,58,29,0,530,
		529,1,0,0,0,530,531,1,0,0,0,531,532,1,0,0,0,532,533,3,64,32,0,533,63,1,
		0,0,0,534,535,5,69,0,0,535,536,3,66,33,0,536,537,5,70,0,0,537,65,1,0,0,
		0,538,540,3,72,36,0,539,538,1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,0,541,
		542,1,0,0,0,542,67,1,0,0,0,543,541,1,0,0,0,544,545,5,29,0,0,545,69,1,0,
		0,0,546,548,3,68,34,0,547,546,1,0,0,0,548,551,1,0,0,0,549,547,1,0,0,0,
		549,550,1,0,0,0,550,552,1,0,0,0,551,549,1,0,0,0,552,553,3,112,56,0,553,
		71,1,0,0,0,554,560,3,70,35,0,555,560,3,90,45,0,556,560,3,62,31,0,557,560,
		3,82,41,0,558,560,3,74,37,0,559,554,1,0,0,0,559,555,1,0,0,0,559,556,1,
		0,0,0,559,557,1,0,0,0,559,558,1,0,0,0,560,73,1,0,0,0,561,562,5,25,0,0,
		562,564,5,58,0,0,563,565,3,58,29,0,564,563,1,0,0,0,564,565,1,0,0,0,565,
		566,1,0,0,0,566,567,3,76,38,0,567,75,1,0,0,0,568,569,5,69,0,0,569,570,
		3,78,39,0,570,571,5,70,0,0,571,77,1,0,0,0,572,574,3,80,40,0,573,572,1,
		0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,576,1,0,0,0,576,79,1,0,0,0,577,
		575,1,0,0,0,578,579,3,96,48,0,579,81,1,0,0,0,580,581,5,26,0,0,581,582,
		5,58,0,0,582,583,3,84,42,0,583,83,1,0,0,0,584,586,5,69,0,0,585,587,3,86,
		43,0,586,585,1,0,0,0,587,588,1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,
		590,1,0,0,0,590,591,5,70,0,0,591,85,1,0,0,0,592,593,5,58,0,0,593,595,5,
		61,0,0,594,596,5,53,0,0,595,594,1,0,0,0,595,596,1,0,0,0,596,597,1,0,0,
		0,597,598,5,74,0,0,598,87,1,0,0,0,599,600,7,0,0,0,600,89,1,0,0,0,601,603,
		3,88,44,0,602,601,1,0,0,0,603,606,1,0,0,0,604,602,1,0,0,0,604,605,1,0,
		0,0,605,607,1,0,0,0,606,604,1,0,0,0,607,609,5,31,0,0,608,610,3,102,51,
		0,609,608,1,0,0,0,609,610,1,0,0,0,610,611,1,0,0,0,611,612,5,58,0,0,612,
		614,5,67,0,0,613,615,3,108,54,0,614,613,1,0,0,0,614,615,1,0,0,0,615,616,
		1,0,0,0,616,617,5,68,0,0,617,618,3,94,47,0,618,91,1,0,0,0,619,621,5,30,
		0,0,620,619,1,0,0,0,620,621,1,0,0,0,621,622,1,0,0,0,622,624,5,31,0,0,623,
		625,3,102,51,0,624,623,1,0,0,0,624,625,1,0,0,0,625,626,1,0,0,0,626,628,
		5,67,0,0,627,629,3,106,53,0,628,627,1,0,0,0,628,629,1,0,0,0,629,630,1,
		0,0,0,630,631,5,68,0,0,631,93,1,0,0,0,632,633,3,56,28,0,633,95,1,0,0,0,
		634,636,5,30,0,0,635,634,1,0,0,0,635,636,1,0,0,0,636,637,1,0,0,0,637,639,
		5,31,0,0,638,640,3,102,51,0,639,638,1,0,0,0,639,640,1,0,0,0,640,641,1,
		0,0,0,641,642,5,58,0,0,642,644,5,67,0,0,643,645,3,108,54,0,644,643,1,0,
		0,0,644,645,1,0,0,0,645,646,1,0,0,0,646,647,5,68,0,0,647,97,1,0,0,0,648,
		650,5,30,0,0,649,648,1,0,0,0,649,650,1,0,0,0,650,651,1,0,0,0,651,653,5,
		31,0,0,652,654,3,102,51,0,653,652,1,0,0,0,653,654,1,0,0,0,654,655,1,0,
		0,0,655,657,5,67,0,0,656,658,3,108,54,0,657,656,1,0,0,0,657,658,1,0,0,
		0,658,659,1,0,0,0,659,661,5,68,0,0,660,662,3,104,52,0,661,660,1,0,0,0,
		661,662,1,0,0,0,662,663,1,0,0,0,663,664,3,94,47,0,664,99,1,0,0,0,665,667,
		5,32,0,0,666,665,1,0,0,0,666,667,1,0,0,0,667,668,1,0,0,0,668,669,3,12,
		6,0,669,101,1,0,0,0,670,675,3,12,6,0,671,672,5,71,0,0,672,674,3,12,6,0,
		673,671,1,0,0,0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,103,
		1,0,0,0,677,675,1,0,0,0,678,679,5,65,0,0,679,684,5,58,0,0,680,681,5,71,
		0,0,681,683,5,58,0,0,682,680,1,0,0,0,683,686,1,0,0,0,684,682,1,0,0,0,684,
		685,1,0,0,0,685,687,1,0,0,0,686,684,1,0,0,0,687,688,5,66,0,0,688,105,1,
		0,0,0,689,694,3,100,50,0,690,691,5,71,0,0,691,693,3,100,50,0,692,690,1,
		0,0,0,693,696,1,0,0,0,694,692,1,0,0,0,694,695,1,0,0,0,695,107,1,0,0,0,
		696,694,1,0,0,0,697,702,3,110,55,0,698,699,5,71,0,0,699,701,3,110,55,0,
		700,698,1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,109,
		1,0,0,0,704,702,1,0,0,0,705,707,5,32,0,0,706,705,1,0,0,0,706,707,1,0,0,
		0,707,709,1,0,0,0,708,710,5,60,0,0,709,708,1,0,0,0,709,710,1,0,0,0,710,
		711,1,0,0,0,711,712,3,12,6,0,712,714,5,58,0,0,713,715,3,130,65,0,714,713,
		1,0,0,0,714,715,1,0,0,0,715,111,1,0,0,0,716,717,3,12,6,0,717,718,5,58,
		0,0,718,113,1,0,0,0,719,724,3,112,56,0,720,721,5,71,0,0,721,723,3,112,
		56,0,722,720,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,
		115,1,0,0,0,726,724,1,0,0,0,727,729,5,29,0,0,728,727,1,0,0,0,728,729,1,
		0,0,0,729,730,1,0,0,0,730,732,3,112,56,0,731,733,3,130,65,0,732,731,1,
		0,0,0,732,733,1,0,0,0,733,734,1,0,0,0,734,735,3,162,81,0,735,117,1,0,0,
		0,736,739,3,112,56,0,737,739,5,58,0,0,738,736,1,0,0,0,738,737,1,0,0,0,
		739,119,1,0,0,0,740,741,3,118,59,0,741,742,3,130,65,0,742,121,1,0,0,0,
		743,746,3,112,56,0,744,746,3,22,11,0,745,743,1,0,0,0,745,744,1,0,0,0,746,
		123,1,0,0,0,747,752,3,122,61,0,748,749,5,71,0,0,749,751,3,122,61,0,750,
		748,1,0,0,0,751,754,1,0,0,0,752,750,1,0,0,0,752,753,1,0,0,0,753,125,1,
		0,0,0,754,752,1,0,0,0,755,761,3,130,65,0,756,761,3,134,67,0,757,758,3,
		136,68,0,758,759,3,24,12,0,759,761,1,0,0,0,760,755,1,0,0,0,760,756,1,0,
		0,0,760,757,1,0,0,0,761,127,1,0,0,0,762,763,3,22,11,0,763,764,3,126,63,
		0,764,129,1,0,0,0,765,766,5,61,0,0,766,767,3,24,12,0,767,131,1,0,0,0,768,
		769,7,1,0,0,769,133,1,0,0,0,770,771,7,2,0,0,771,135,1,0,0,0,772,773,7,
		3,0,0,773,137,1,0,0,0,774,775,7,4,0,0,775,139,1,0,0,0,776,777,7,5,0,0,
		777,141,1,0,0,0,778,779,7,6,0,0,779,143,1,0,0,0,780,781,7,7,0,0,781,145,
		1,0,0,0,782,783,7,8,0,0,783,147,1,0,0,0,784,785,5,73,0,0,785,149,1,0,0,
		0,786,787,5,69,0,0,787,792,3,154,77,0,788,789,5,71,0,0,789,791,3,154,77,
		0,790,788,1,0,0,0,791,794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,
		795,1,0,0,0,794,792,1,0,0,0,795,796,5,70,0,0,796,799,1,0,0,0,797,799,3,
		152,76,0,798,786,1,0,0,0,798,797,1,0,0,0,799,151,1,0,0,0,800,801,5,69,
		0,0,801,802,5,70,0,0,802,153,1,0,0,0,803,804,5,58,0,0,804,805,5,63,0,0,
		805,806,3,160,80,0,806,155,1,0,0,0,807,808,5,65,0,0,808,813,3,160,80,0,
		809,810,5,71,0,0,810,812,3,160,80,0,811,809,1,0,0,0,812,815,1,0,0,0,813,
		811,1,0,0,0,813,814,1,0,0,0,814,816,1,0,0,0,815,813,1,0,0,0,816,817,5,
		66,0,0,817,820,1,0,0,0,818,820,3,158,79,0,819,807,1,0,0,0,819,818,1,0,
		0,0,820,157,1,0,0,0,821,822,5,65,0,0,822,823,5,66,0,0,823,159,1,0,0,0,
		824,825,3,24,12,0,825,161,1,0,0,0,826,831,5,62,0,0,827,831,5,0,0,1,828,
		831,4,81,13,0,829,831,4,81,14,0,830,826,1,0,0,0,830,827,1,0,0,0,830,828,
		1,0,0,0,830,829,1,0,0,0,831,163,1,0,0,0,77,167,174,181,190,196,200,206,
		210,224,228,238,243,272,304,306,319,327,339,347,352,358,366,390,402,406,
		437,447,462,474,483,487,491,494,502,513,522,530,541,549,559,564,575,588,
		595,604,609,614,620,624,628,635,639,644,649,653,657,661,666,675,684,694,
		702,706,709,714,724,728,732,738,745,752,760,792,798,813,819,830
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
