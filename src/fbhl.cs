// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace fbhl
{

using global::System;
using global::FlatBuffers;

public enum EnumUnaryOp : sbyte
{
 NONE = 0,
 NEG = 1,
 NOT = 2,
};

public enum AST_OneOf : byte
{
 NONE = 0,
 AST_Import = 1,
 AST_Module = 2,
 AST_Interim = 3,
 AST_UnaryOpExp = 4,
 AST_BinaryOpExp = 5,
 AST_Inc = 6,
 AST_New = 7,
 AST_FuncDecl = 8,
 AST_ClassDecl = 9,
 AST_EnumDecl = 10,
 AST_LambdaDecl = 11,
 AST_TypeCast = 12,
 AST_Call = 13,
 AST_Return = 14,
 AST_Break = 15,
 AST_LiteralStr = 16,
 AST_LiteralNum = 17,
 AST_LiteralBool = 18,
 AST_LiteralNil = 19,
 AST_VarDecl = 20,
 AST_Block = 21,
 AST_JsonObj = 22,
 AST_JsonArr = 23,
 AST_JsonArrAddItem = 24,
 AST_JsonPair = 25,
 AST_PopValue = 26,
};

public enum EnumBinaryOp : sbyte
{
 NONE = 0,
 AND = 1,
 OR = 2,
 ADD = 3,
 SUB = 4,
 MUL = 5,
 DIV = 6,
 MOD = 7,
 GT = 8,
 LT = 9,
 GTE = 10,
 LTE = 11,
 EQ = 12,
 NQ = 13,
 BIT_OR = 14,
 BIT_AND = 15,
};

public enum EnumCall : sbyte
{
 NONE = 0,
 VAR = 1,
 VARW = 2,
 MVAR = 3,
 MVARW = 4,
 MVARREF = 5,
 FUNC = 6,
 MFUNC = 7,
 ARR_IDX = 8,
 ARR_IDXW = 9,
 FUNC2VAR = 10,
 FUNC_PTR = 11,
 FUNC_PTR_POP = 12,
};

public enum EnumBlock : sbyte
{
 NONE = 0,
 SEQ = 1,
 DEFER = 2,
 PARAL = 3,
 PARAL_ALL = 4,
 PRIO = 5,
 FOREVER = 6,
 IF = 7,
 WHILE = 8,
 FUNC = 9,
 UNTIL_FAILURE = 10,
 UNTIL_FAILURE_ = 11,
 UNTIL_SUCCESS = 12,
 NOT = 13,
 SEQ_ = 14,
 EVAL = 15,
 GROUP = 16,
};

public struct AST_Selector : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_Selector GetRootAsAST_Selector(ByteBuffer _bb) { return GetRootAsAST_Selector(_bb, new AST_Selector()); }
  public static AST_Selector GetRootAsAST_Selector(ByteBuffer _bb, AST_Selector obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_Selector __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AST_OneOf VType { get { int o = __p.__offset(4); return o != 0 ? (AST_OneOf)__p.bb.Get(o + __p.bb_pos) : AST_OneOf.NONE; } }
  public TTable? V<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<AST_Selector> CreateAST_Selector(FlatBufferBuilder builder,
      AST_OneOf v_type = AST_OneOf.NONE,
      int vOffset = 0) {
    builder.StartObject(2);
    AST_Selector.AddV(builder, vOffset);
    AST_Selector.AddVType(builder, v_type);
    return AST_Selector.EndAST_Selector(builder);
  }

  public static void StartAST_Selector(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddVType(FlatBufferBuilder builder, AST_OneOf vType) { builder.AddByte(0, (byte)vType, 0); }
  public static void AddV(FlatBufferBuilder builder, int vOffset) { builder.AddOffset(1, vOffset, 0); }
  public static Offset<AST_Selector> EndAST_Selector(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_Selector>(o);
  }
};

public struct AST_Import : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_Import GetRootAsAST_Import(ByteBuffer _bb) { return GetRootAsAST_Import(_bb, new AST_Import()); }
  public static AST_Import GetRootAsAST_Import(ByteBuffer _bb, AST_Import obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_Import __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Modules(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int ModulesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetModulesBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<AST_Import> CreateAST_Import(FlatBufferBuilder builder,
      VectorOffset modulesOffset = default(VectorOffset)) {
    builder.StartObject(1);
    AST_Import.AddModules(builder, modulesOffset);
    return AST_Import.EndAST_Import(builder);
  }

  public static void StartAST_Import(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddModules(FlatBufferBuilder builder, VectorOffset modulesOffset) { builder.AddOffset(0, modulesOffset.Value, 0); }
  public static VectorOffset CreateModulesVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartModulesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_Import> EndAST_Import(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_Import>(o);
  }
};

public struct AST_Interim : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_Interim GetRootAsAST_Interim(ByteBuffer _bb) { return GetRootAsAST_Interim(_bb, new AST_Interim()); }
  public static AST_Interim GetRootAsAST_Interim(ByteBuffer _bb, AST_Interim obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_Interim __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AST_Selector? Children(int j) { int o = __p.__offset(4); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_Interim> CreateAST_Interim(FlatBufferBuilder builder,
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(1);
    AST_Interim.AddChildren(builder, childrenOffset);
    return AST_Interim.EndAST_Interim(builder);
  }

  public static void StartAST_Interim(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(0, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_Interim> EndAST_Interim(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_Interim>(o);
  }
};

public struct AST_Module : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_Module GetRootAsAST_Module(ByteBuffer _bb) { return GetRootAsAST_Module(_bb, new AST_Module()); }
  public static AST_Module GetRootAsAST_Module(ByteBuffer _bb, AST_Module obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_Module __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Nname { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public AST_Selector? Children(int j) { int o = __p.__offset(8); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_Module> CreateAST_Module(FlatBufferBuilder builder,
      uint nname = 0,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(3);
    AST_Module.AddChildren(builder, childrenOffset);
    AST_Module.AddName(builder, nameOffset);
    AST_Module.AddNname(builder, nname);
    return AST_Module.EndAST_Module(builder);
  }

  public static void StartAST_Module(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddNname(FlatBufferBuilder builder, uint nname) { builder.AddUint(0, nname, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(2, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_Module> EndAST_Module(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_Module>(o);
  }
};

public struct AST_UnaryOpExp : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_UnaryOpExp GetRootAsAST_UnaryOpExp(ByteBuffer _bb) { return GetRootAsAST_UnaryOpExp(_bb, new AST_UnaryOpExp()); }
  public static AST_UnaryOpExp GetRootAsAST_UnaryOpExp(ByteBuffer _bb, AST_UnaryOpExp obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_UnaryOpExp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public EnumUnaryOp Type { get { int o = __p.__offset(4); return o != 0 ? (EnumUnaryOp)__p.bb.GetSbyte(o + __p.bb_pos) : EnumUnaryOp.NONE; } }
  public AST_Selector? Children(int j) { int o = __p.__offset(6); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_UnaryOpExp> CreateAST_UnaryOpExp(FlatBufferBuilder builder,
      EnumUnaryOp type = EnumUnaryOp.NONE,
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(2);
    AST_UnaryOpExp.AddChildren(builder, childrenOffset);
    AST_UnaryOpExp.AddType(builder, type);
    return AST_UnaryOpExp.EndAST_UnaryOpExp(builder);
  }

  public static void StartAST_UnaryOpExp(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddType(FlatBufferBuilder builder, EnumUnaryOp type) { builder.AddSbyte(0, (sbyte)type, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(1, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_UnaryOpExp> EndAST_UnaryOpExp(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_UnaryOpExp>(o);
  }
};

public struct AST_BinaryOpExp : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_BinaryOpExp GetRootAsAST_BinaryOpExp(ByteBuffer _bb) { return GetRootAsAST_BinaryOpExp(_bb, new AST_BinaryOpExp()); }
  public static AST_BinaryOpExp GetRootAsAST_BinaryOpExp(ByteBuffer _bb, AST_BinaryOpExp obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_BinaryOpExp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public EnumBinaryOp Type { get { int o = __p.__offset(4); return o != 0 ? (EnumBinaryOp)__p.bb.GetSbyte(o + __p.bb_pos) : EnumBinaryOp.NONE; } }
  public AST_Selector? Children(int j) { int o = __p.__offset(6); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_BinaryOpExp> CreateAST_BinaryOpExp(FlatBufferBuilder builder,
      EnumBinaryOp type = EnumBinaryOp.NONE,
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(2);
    AST_BinaryOpExp.AddChildren(builder, childrenOffset);
    AST_BinaryOpExp.AddType(builder, type);
    return AST_BinaryOpExp.EndAST_BinaryOpExp(builder);
  }

  public static void StartAST_BinaryOpExp(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddType(FlatBufferBuilder builder, EnumBinaryOp type) { builder.AddSbyte(0, (sbyte)type, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(1, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_BinaryOpExp> EndAST_BinaryOpExp(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_BinaryOpExp>(o);
  }
};

public struct AST_Inc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_Inc GetRootAsAST_Inc(ByteBuffer _bb) { return GetRootAsAST_Inc(_bb, new AST_Inc()); }
  public static AST_Inc GetRootAsAST_Inc(ByteBuffer _bb, AST_Inc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_Inc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Nname { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<AST_Inc> CreateAST_Inc(FlatBufferBuilder builder,
      uint nname = 0) {
    builder.StartObject(1);
    AST_Inc.AddNname(builder, nname);
    return AST_Inc.EndAST_Inc(builder);
  }

  public static void StartAST_Inc(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddNname(FlatBufferBuilder builder, uint nname) { builder.AddUint(0, nname, 0); }
  public static Offset<AST_Inc> EndAST_Inc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_Inc>(o);
  }
};

public struct AST_New : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_New GetRootAsAST_New(ByteBuffer _bb) { return GetRootAsAST_New(_bb, new AST_New()); }
  public static AST_New GetRootAsAST_New(ByteBuffer _bb, AST_New obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_New __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Ntype { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
  public AST_Selector? Children(int j) { int o = __p.__offset(8); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_New> CreateAST_New(FlatBufferBuilder builder,
      uint ntype = 0,
      StringOffset typeOffset = default(StringOffset),
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(3);
    AST_New.AddChildren(builder, childrenOffset);
    AST_New.AddType(builder, typeOffset);
    AST_New.AddNtype(builder, ntype);
    return AST_New.EndAST_New(builder);
  }

  public static void StartAST_New(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddNtype(FlatBufferBuilder builder, uint ntype) { builder.AddUint(0, ntype, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(2, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_New> EndAST_New(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_New>(o);
  }
};

public struct AST_FuncDecl : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_FuncDecl GetRootAsAST_FuncDecl(ByteBuffer _bb) { return GetRootAsAST_FuncDecl(_bb, new AST_FuncDecl()); }
  public static AST_FuncDecl GetRootAsAST_FuncDecl(ByteBuffer _bb, AST_FuncDecl obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_FuncDecl __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Ntype { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
  public uint Nname1 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Nname2 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(12); }
  public AST_Selector? Children(int j) { int o = __p.__offset(14); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_FuncDecl> CreateAST_FuncDecl(FlatBufferBuilder builder,
      uint ntype = 0,
      StringOffset typeOffset = default(StringOffset),
      uint nname1 = 0,
      uint nname2 = 0,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(6);
    AST_FuncDecl.AddChildren(builder, childrenOffset);
    AST_FuncDecl.AddName(builder, nameOffset);
    AST_FuncDecl.AddNname2(builder, nname2);
    AST_FuncDecl.AddNname1(builder, nname1);
    AST_FuncDecl.AddType(builder, typeOffset);
    AST_FuncDecl.AddNtype(builder, ntype);
    return AST_FuncDecl.EndAST_FuncDecl(builder);
  }

  public static void StartAST_FuncDecl(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddNtype(FlatBufferBuilder builder, uint ntype) { builder.AddUint(0, ntype, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddNname1(FlatBufferBuilder builder, uint nname1) { builder.AddUint(2, nname1, 0); }
  public static void AddNname2(FlatBufferBuilder builder, uint nname2) { builder.AddUint(3, nname2, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(4, nameOffset.Value, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(5, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_FuncDecl> EndAST_FuncDecl(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_FuncDecl>(o);
  }
};

public struct AST_ClassDecl : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_ClassDecl GetRootAsAST_ClassDecl(ByteBuffer _bb) { return GetRootAsAST_ClassDecl(_bb, new AST_ClassDecl()); }
  public static AST_ClassDecl GetRootAsAST_ClassDecl(ByteBuffer _bb, AST_ClassDecl obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_ClassDecl __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Nname { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public uint Nparent { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Parent { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetParentBytes() { return __p.__vector_as_arraysegment(10); }
  public AST_Selector? Children(int j) { int o = __p.__offset(12); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_ClassDecl> CreateAST_ClassDecl(FlatBufferBuilder builder,
      uint nname = 0,
      StringOffset nameOffset = default(StringOffset),
      uint nparent = 0,
      StringOffset parentOffset = default(StringOffset),
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(5);
    AST_ClassDecl.AddChildren(builder, childrenOffset);
    AST_ClassDecl.AddParent(builder, parentOffset);
    AST_ClassDecl.AddNparent(builder, nparent);
    AST_ClassDecl.AddName(builder, nameOffset);
    AST_ClassDecl.AddNname(builder, nname);
    return AST_ClassDecl.EndAST_ClassDecl(builder);
  }

  public static void StartAST_ClassDecl(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddNname(FlatBufferBuilder builder, uint nname) { builder.AddUint(0, nname, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddNparent(FlatBufferBuilder builder, uint nparent) { builder.AddUint(2, nparent, 0); }
  public static void AddParent(FlatBufferBuilder builder, StringOffset parentOffset) { builder.AddOffset(3, parentOffset.Value, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(4, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_ClassDecl> EndAST_ClassDecl(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_ClassDecl>(o);
  }
};

public struct EnumItem : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EnumItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Nname { get { return __p.bb.GetUint(__p.bb_pos + 0); } }
  public int Value { get { return __p.bb.GetInt(__p.bb_pos + 4); } }

  public static Offset<EnumItem> CreateEnumItem(FlatBufferBuilder builder, uint Nname, int Value) {
    builder.Prep(4, 8);
    builder.PutInt(Value);
    builder.PutUint(Nname);
    return new Offset<EnumItem>(builder.Offset);
  }
};

public struct AST_EnumDecl : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_EnumDecl GetRootAsAST_EnumDecl(ByteBuffer _bb) { return GetRootAsAST_EnumDecl(_bb, new AST_EnumDecl()); }
  public static AST_EnumDecl GetRootAsAST_EnumDecl(ByteBuffer _bb, AST_EnumDecl obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_EnumDecl __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Nname { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public EnumItem? Children(int j) { int o = __p.__offset(8); return o != 0 ? (EnumItem?)(new EnumItem()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_EnumDecl> CreateAST_EnumDecl(FlatBufferBuilder builder,
      uint nname = 0,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(3);
    AST_EnumDecl.AddChildren(builder, childrenOffset);
    AST_EnumDecl.AddName(builder, nameOffset);
    AST_EnumDecl.AddNname(builder, nname);
    return AST_EnumDecl.EndAST_EnumDecl(builder);
  }

  public static void StartAST_EnumDecl(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddNname(FlatBufferBuilder builder, uint nname) { builder.AddUint(0, nname, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(2, childrenOffset.Value, 0); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<AST_EnumDecl> EndAST_EnumDecl(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_EnumDecl>(o);
  }
};

public struct UseParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static UseParam GetRootAsUseParam(ByteBuffer _bb) { return GetRootAsUseParam(_bb, new UseParam()); }
  public static UseParam GetRootAsUseParam(ByteBuffer _bb, UseParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public UseParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Nname { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<UseParam> CreateUseParam(FlatBufferBuilder builder,
      uint nname = 0,
      StringOffset nameOffset = default(StringOffset)) {
    builder.StartObject(2);
    UseParam.AddName(builder, nameOffset);
    UseParam.AddNname(builder, nname);
    return UseParam.EndUseParam(builder);
  }

  public static void StartUseParam(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddNname(FlatBufferBuilder builder, uint nname) { builder.AddUint(0, nname, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static Offset<UseParam> EndUseParam(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<UseParam>(o);
  }
};

public struct AST_LambdaDecl : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_LambdaDecl GetRootAsAST_LambdaDecl(ByteBuffer _bb) { return GetRootAsAST_LambdaDecl(_bb, new AST_LambdaDecl()); }
  public static AST_LambdaDecl GetRootAsAST_LambdaDecl(ByteBuffer _bb, AST_LambdaDecl obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_LambdaDecl __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AST_FuncDecl? Base { get { int o = __p.__offset(4); return o != 0 ? (AST_FuncDecl?)(new AST_FuncDecl()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public UseParam? Useparams(int j) { int o = __p.__offset(6); return o != 0 ? (UseParam?)(new UseParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UseparamsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_LambdaDecl> CreateAST_LambdaDecl(FlatBufferBuilder builder,
      Offset<AST_FuncDecl> baseOffset = default(Offset<AST_FuncDecl>),
      VectorOffset useparamsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    AST_LambdaDecl.AddUseparams(builder, useparamsOffset);
    AST_LambdaDecl.AddBase(builder, baseOffset);
    return AST_LambdaDecl.EndAST_LambdaDecl(builder);
  }

  public static void StartAST_LambdaDecl(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddBase(FlatBufferBuilder builder, Offset<AST_FuncDecl> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
  public static void AddUseparams(FlatBufferBuilder builder, VectorOffset useparamsOffset) { builder.AddOffset(1, useparamsOffset.Value, 0); }
  public static VectorOffset CreateUseparamsVector(FlatBufferBuilder builder, Offset<UseParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartUseparamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_LambdaDecl> EndAST_LambdaDecl(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_LambdaDecl>(o);
  }
};

public struct AST_TypeCast : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_TypeCast GetRootAsAST_TypeCast(ByteBuffer _bb) { return GetRootAsAST_TypeCast(_bb, new AST_TypeCast()); }
  public static AST_TypeCast GetRootAsAST_TypeCast(ByteBuffer _bb, AST_TypeCast obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_TypeCast __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Ntype { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
  public AST_Selector? Children(int j) { int o = __p.__offset(8); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_TypeCast> CreateAST_TypeCast(FlatBufferBuilder builder,
      uint ntype = 0,
      StringOffset typeOffset = default(StringOffset),
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(3);
    AST_TypeCast.AddChildren(builder, childrenOffset);
    AST_TypeCast.AddType(builder, typeOffset);
    AST_TypeCast.AddNtype(builder, ntype);
    return AST_TypeCast.EndAST_TypeCast(builder);
  }

  public static void StartAST_TypeCast(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddNtype(FlatBufferBuilder builder, uint ntype) { builder.AddUint(0, ntype, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(2, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_TypeCast> EndAST_TypeCast(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_TypeCast>(o);
  }
};

public struct AST_Call : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_Call GetRootAsAST_Call(ByteBuffer _bb) { return GetRootAsAST_Call(_bb, new AST_Call()); }
  public static AST_Call GetRootAsAST_Call(ByteBuffer _bb, AST_Call obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_Call __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public EnumCall Type { get { int o = __p.__offset(4); return o != 0 ? (EnumCall)__p.bb.GetSbyte(o + __p.bb_pos) : EnumCall.NONE; } }
  public uint Nname1 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Nname2 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
  public uint CargsBits { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint ScopeNtype { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint LineNum { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public AST_Selector? Children(int j) { int o = __p.__offset(18); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_Call> CreateAST_Call(FlatBufferBuilder builder,
      EnumCall type = EnumCall.NONE,
      uint nname1 = 0,
      uint nname2 = 0,
      StringOffset nameOffset = default(StringOffset),
      uint cargs_bits = 0,
      uint scope_ntype = 0,
      uint line_num = 0,
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(8);
    AST_Call.AddChildren(builder, childrenOffset);
    AST_Call.AddLineNum(builder, line_num);
    AST_Call.AddScopeNtype(builder, scope_ntype);
    AST_Call.AddCargsBits(builder, cargs_bits);
    AST_Call.AddName(builder, nameOffset);
    AST_Call.AddNname2(builder, nname2);
    AST_Call.AddNname1(builder, nname1);
    AST_Call.AddType(builder, type);
    return AST_Call.EndAST_Call(builder);
  }

  public static void StartAST_Call(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddType(FlatBufferBuilder builder, EnumCall type) { builder.AddSbyte(0, (sbyte)type, 0); }
  public static void AddNname1(FlatBufferBuilder builder, uint nname1) { builder.AddUint(1, nname1, 0); }
  public static void AddNname2(FlatBufferBuilder builder, uint nname2) { builder.AddUint(2, nname2, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddCargsBits(FlatBufferBuilder builder, uint cargsBits) { builder.AddUint(4, cargsBits, 0); }
  public static void AddScopeNtype(FlatBufferBuilder builder, uint scopeNtype) { builder.AddUint(5, scopeNtype, 0); }
  public static void AddLineNum(FlatBufferBuilder builder, uint lineNum) { builder.AddUint(6, lineNum, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(7, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_Call> EndAST_Call(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_Call>(o);
  }
};

public struct AST_Return : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_Return GetRootAsAST_Return(ByteBuffer _bb) { return GetRootAsAST_Return(_bb, new AST_Return()); }
  public static AST_Return GetRootAsAST_Return(ByteBuffer _bb, AST_Return obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_Return __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AST_Selector? Children(int j) { int o = __p.__offset(4); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_Return> CreateAST_Return(FlatBufferBuilder builder,
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(1);
    AST_Return.AddChildren(builder, childrenOffset);
    return AST_Return.EndAST_Return(builder);
  }

  public static void StartAST_Return(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(0, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_Return> EndAST_Return(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_Return>(o);
  }
};

public struct AST_Break : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_Break GetRootAsAST_Break(ByteBuffer _bb) { return GetRootAsAST_Break(_bb, new AST_Break()); }
  public static AST_Break GetRootAsAST_Break(ByteBuffer _bb, AST_Break obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_Break __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartAST_Break(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<AST_Break> EndAST_Break(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_Break>(o);
  }
};

public struct AST_LiteralStr : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_LiteralStr GetRootAsAST_LiteralStr(ByteBuffer _bb) { return GetRootAsAST_LiteralStr(_bb, new AST_LiteralStr()); }
  public static AST_LiteralStr GetRootAsAST_LiteralStr(ByteBuffer _bb, AST_LiteralStr obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_LiteralStr __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Sval { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetSvalBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<AST_LiteralStr> CreateAST_LiteralStr(FlatBufferBuilder builder,
      StringOffset svalOffset = default(StringOffset)) {
    builder.StartObject(1);
    AST_LiteralStr.AddSval(builder, svalOffset);
    return AST_LiteralStr.EndAST_LiteralStr(builder);
  }

  public static void StartAST_LiteralStr(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddSval(FlatBufferBuilder builder, StringOffset svalOffset) { builder.AddOffset(0, svalOffset.Value, 0); }
  public static Offset<AST_LiteralStr> EndAST_LiteralStr(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_LiteralStr>(o);
  }
};

public struct AST_LiteralNum : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_LiteralNum GetRootAsAST_LiteralNum(ByteBuffer _bb) { return GetRootAsAST_LiteralNum(_bb, new AST_LiteralNum()); }
  public static AST_LiteralNum GetRootAsAST_LiteralNum(ByteBuffer _bb, AST_LiteralNum obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_LiteralNum __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Nval { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<AST_LiteralNum> CreateAST_LiteralNum(FlatBufferBuilder builder,
      double nval = 0.0) {
    builder.StartObject(1);
    AST_LiteralNum.AddNval(builder, nval);
    return AST_LiteralNum.EndAST_LiteralNum(builder);
  }

  public static void StartAST_LiteralNum(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddNval(FlatBufferBuilder builder, double nval) { builder.AddDouble(0, nval, 0.0); }
  public static Offset<AST_LiteralNum> EndAST_LiteralNum(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_LiteralNum>(o);
  }
};

public struct AST_LiteralBool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_LiteralBool GetRootAsAST_LiteralBool(ByteBuffer _bb) { return GetRootAsAST_LiteralBool(_bb, new AST_LiteralBool()); }
  public static AST_LiteralBool GetRootAsAST_LiteralBool(ByteBuffer _bb, AST_LiteralBool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_LiteralBool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Bval { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<AST_LiteralBool> CreateAST_LiteralBool(FlatBufferBuilder builder,
      bool bval = false) {
    builder.StartObject(1);
    AST_LiteralBool.AddBval(builder, bval);
    return AST_LiteralBool.EndAST_LiteralBool(builder);
  }

  public static void StartAST_LiteralBool(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddBval(FlatBufferBuilder builder, bool bval) { builder.AddBool(0, bval, false); }
  public static Offset<AST_LiteralBool> EndAST_LiteralBool(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_LiteralBool>(o);
  }
};

public struct AST_LiteralNil : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_LiteralNil GetRootAsAST_LiteralNil(ByteBuffer _bb) { return GetRootAsAST_LiteralNil(_bb, new AST_LiteralNil()); }
  public static AST_LiteralNil GetRootAsAST_LiteralNil(ByteBuffer _bb, AST_LiteralNil obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_LiteralNil __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartAST_LiteralNil(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<AST_LiteralNil> EndAST_LiteralNil(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_LiteralNil>(o);
  }
};

public struct AST_VarDecl : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_VarDecl GetRootAsAST_VarDecl(ByteBuffer _bb) { return GetRootAsAST_VarDecl(_bb, new AST_VarDecl()); }
  public static AST_VarDecl GetRootAsAST_VarDecl(ByteBuffer _bb, AST_VarDecl obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_VarDecl __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Nname { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public uint Ntype { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public AST_Selector? Children(int j) { int o = __p.__offset(10); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_VarDecl> CreateAST_VarDecl(FlatBufferBuilder builder,
      uint nname = 0,
      StringOffset nameOffset = default(StringOffset),
      uint ntype = 0,
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(4);
    AST_VarDecl.AddChildren(builder, childrenOffset);
    AST_VarDecl.AddNtype(builder, ntype);
    AST_VarDecl.AddName(builder, nameOffset);
    AST_VarDecl.AddNname(builder, nname);
    return AST_VarDecl.EndAST_VarDecl(builder);
  }

  public static void StartAST_VarDecl(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddNname(FlatBufferBuilder builder, uint nname) { builder.AddUint(0, nname, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddNtype(FlatBufferBuilder builder, uint ntype) { builder.AddUint(2, ntype, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(3, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_VarDecl> EndAST_VarDecl(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_VarDecl>(o);
  }
};

public struct AST_Block : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_Block GetRootAsAST_Block(ByteBuffer _bb) { return GetRootAsAST_Block(_bb, new AST_Block()); }
  public static AST_Block GetRootAsAST_Block(ByteBuffer _bb, AST_Block obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_Block __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public EnumBlock Type { get { int o = __p.__offset(4); return o != 0 ? (EnumBlock)__p.bb.GetSbyte(o + __p.bb_pos) : EnumBlock.NONE; } }
  public AST_Selector? Children(int j) { int o = __p.__offset(6); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_Block> CreateAST_Block(FlatBufferBuilder builder,
      EnumBlock type = EnumBlock.NONE,
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(2);
    AST_Block.AddChildren(builder, childrenOffset);
    AST_Block.AddType(builder, type);
    return AST_Block.EndAST_Block(builder);
  }

  public static void StartAST_Block(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddType(FlatBufferBuilder builder, EnumBlock type) { builder.AddSbyte(0, (sbyte)type, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(1, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_Block> EndAST_Block(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_Block>(o);
  }
};

public struct AST_JsonObj : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_JsonObj GetRootAsAST_JsonObj(ByteBuffer _bb) { return GetRootAsAST_JsonObj(_bb, new AST_JsonObj()); }
  public static AST_JsonObj GetRootAsAST_JsonObj(ByteBuffer _bb, AST_JsonObj obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_JsonObj __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Ntype { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public AST_Selector? Children(int j) { int o = __p.__offset(6); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_JsonObj> CreateAST_JsonObj(FlatBufferBuilder builder,
      uint ntype = 0,
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(2);
    AST_JsonObj.AddChildren(builder, childrenOffset);
    AST_JsonObj.AddNtype(builder, ntype);
    return AST_JsonObj.EndAST_JsonObj(builder);
  }

  public static void StartAST_JsonObj(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddNtype(FlatBufferBuilder builder, uint ntype) { builder.AddUint(0, ntype, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(1, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_JsonObj> EndAST_JsonObj(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_JsonObj>(o);
  }
};

public struct AST_JsonArr : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_JsonArr GetRootAsAST_JsonArr(ByteBuffer _bb) { return GetRootAsAST_JsonArr(_bb, new AST_JsonArr()); }
  public static AST_JsonArr GetRootAsAST_JsonArr(ByteBuffer _bb, AST_JsonArr obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_JsonArr __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Ntype { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public AST_Selector? Children(int j) { int o = __p.__offset(6); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_JsonArr> CreateAST_JsonArr(FlatBufferBuilder builder,
      uint ntype = 0,
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(2);
    AST_JsonArr.AddChildren(builder, childrenOffset);
    AST_JsonArr.AddNtype(builder, ntype);
    return AST_JsonArr.EndAST_JsonArr(builder);
  }

  public static void StartAST_JsonArr(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddNtype(FlatBufferBuilder builder, uint ntype) { builder.AddUint(0, ntype, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(1, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_JsonArr> EndAST_JsonArr(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_JsonArr>(o);
  }
};

public struct AST_JsonArrAddItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_JsonArrAddItem GetRootAsAST_JsonArrAddItem(ByteBuffer _bb) { return GetRootAsAST_JsonArrAddItem(_bb, new AST_JsonArrAddItem()); }
  public static AST_JsonArrAddItem GetRootAsAST_JsonArrAddItem(ByteBuffer _bb, AST_JsonArrAddItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_JsonArrAddItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartAST_JsonArrAddItem(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<AST_JsonArrAddItem> EndAST_JsonArrAddItem(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_JsonArrAddItem>(o);
  }
};

public struct AST_JsonPair : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_JsonPair GetRootAsAST_JsonPair(ByteBuffer _bb) { return GetRootAsAST_JsonPair(_bb, new AST_JsonPair()); }
  public static AST_JsonPair GetRootAsAST_JsonPair(ByteBuffer _bb, AST_JsonPair obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_JsonPair __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Nname { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public uint ScopeNtype { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public AST_Selector? Children(int j) { int o = __p.__offset(10); return o != 0 ? (AST_Selector?)(new AST_Selector()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AST_JsonPair> CreateAST_JsonPair(FlatBufferBuilder builder,
      uint nname = 0,
      StringOffset nameOffset = default(StringOffset),
      uint scope_ntype = 0,
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartObject(4);
    AST_JsonPair.AddChildren(builder, childrenOffset);
    AST_JsonPair.AddScopeNtype(builder, scope_ntype);
    AST_JsonPair.AddName(builder, nameOffset);
    AST_JsonPair.AddNname(builder, nname);
    return AST_JsonPair.EndAST_JsonPair(builder);
  }

  public static void StartAST_JsonPair(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddNname(FlatBufferBuilder builder, uint nname) { builder.AddUint(0, nname, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddScopeNtype(FlatBufferBuilder builder, uint scopeNtype) { builder.AddUint(2, scopeNtype, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(3, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<AST_Selector>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AST_JsonPair> EndAST_JsonPair(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_JsonPair>(o);
  }
};

public struct AST_PopValue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AST_PopValue GetRootAsAST_PopValue(ByteBuffer _bb) { return GetRootAsAST_PopValue(_bb, new AST_PopValue()); }
  public static AST_PopValue GetRootAsAST_PopValue(ByteBuffer _bb, AST_PopValue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AST_PopValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartAST_PopValue(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<AST_PopValue> EndAST_PopValue(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AST_PopValue>(o);
  }
};

///////////////////////////////////////////////////////
public struct Func2Assets : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Func2Assets GetRootAsFunc2Assets(ByteBuffer _bb) { return GetRootAsFunc2Assets(_bb, new Func2Assets()); }
  public static Func2Assets GetRootAsFunc2Assets(ByteBuffer _bb, Func2Assets obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Func2Assets __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Func1 { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Func2 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Assets(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AssetsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Func2Assets> CreateFunc2Assets(FlatBufferBuilder builder,
      uint func1 = 0,
      uint func2 = 0,
      VectorOffset assetsOffset = default(VectorOffset)) {
    builder.StartObject(3);
    Func2Assets.AddAssets(builder, assetsOffset);
    Func2Assets.AddFunc2(builder, func2);
    Func2Assets.AddFunc1(builder, func1);
    return Func2Assets.EndFunc2Assets(builder);
  }

  public static void StartFunc2Assets(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddFunc1(FlatBufferBuilder builder, uint func1) { builder.AddUint(0, func1, 0); }
  public static void AddFunc2(FlatBufferBuilder builder, uint func2) { builder.AddUint(1, func2, 0); }
  public static void AddAssets(FlatBufferBuilder builder, VectorOffset assetsOffset) { builder.AddOffset(2, assetsOffset.Value, 0); }
  public static VectorOffset CreateAssetsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartAssetsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Func2Assets> EndFunc2Assets(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Func2Assets>(o);
  }
};

public struct Func2Crefs : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Func2Crefs GetRootAsFunc2Crefs(ByteBuffer _bb) { return GetRootAsFunc2Crefs(_bb, new Func2Crefs()); }
  public static Func2Crefs GetRootAsFunc2Crefs(ByteBuffer _bb, Func2Crefs obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Func2Crefs __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Func1 { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Func2 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Crefs(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CrefsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Func2Crefs> CreateFunc2Crefs(FlatBufferBuilder builder,
      uint func1 = 0,
      uint func2 = 0,
      VectorOffset crefsOffset = default(VectorOffset)) {
    builder.StartObject(3);
    Func2Crefs.AddCrefs(builder, crefsOffset);
    Func2Crefs.AddFunc2(builder, func2);
    Func2Crefs.AddFunc1(builder, func1);
    return Func2Crefs.EndFunc2Crefs(builder);
  }

  public static void StartFunc2Crefs(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddFunc1(FlatBufferBuilder builder, uint func1) { builder.AddUint(0, func1, 0); }
  public static void AddFunc2(FlatBufferBuilder builder, uint func2) { builder.AddUint(1, func2, 0); }
  public static void AddCrefs(FlatBufferBuilder builder, VectorOffset crefsOffset) { builder.AddOffset(2, crefsOffset.Value, 0); }
  public static VectorOffset CreateCrefsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartCrefsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Func2Crefs> EndFunc2Crefs(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Func2Crefs>(o);
  }
};

public struct PostProcResult : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PostProcResult GetRootAsPostProcResult(ByteBuffer _bb) { return GetRootAsPostProcResult(_bb, new PostProcResult()); }
  public static PostProcResult GetRootAsPostProcResult(ByteBuffer _bb, PostProcResult obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PostProcResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Func2Assets? Func2assets(int j) { int o = __p.__offset(4); return o != 0 ? (Func2Assets?)(new Func2Assets()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Func2assetsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Func2Crefs? Func2crefs(int j) { int o = __p.__offset(6); return o != 0 ? (Func2Crefs?)(new Func2Crefs()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Func2crefsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PostProcResult> CreatePostProcResult(FlatBufferBuilder builder,
      VectorOffset func2assetsOffset = default(VectorOffset),
      VectorOffset func2crefsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    PostProcResult.AddFunc2crefs(builder, func2crefsOffset);
    PostProcResult.AddFunc2assets(builder, func2assetsOffset);
    return PostProcResult.EndPostProcResult(builder);
  }

  public static void StartPostProcResult(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddFunc2assets(FlatBufferBuilder builder, VectorOffset func2assetsOffset) { builder.AddOffset(0, func2assetsOffset.Value, 0); }
  public static VectorOffset CreateFunc2assetsVector(FlatBufferBuilder builder, Offset<Func2Assets>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartFunc2assetsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFunc2crefs(FlatBufferBuilder builder, VectorOffset func2crefsOffset) { builder.AddOffset(1, func2crefsOffset.Value, 0); }
  public static VectorOffset CreateFunc2crefsVector(FlatBufferBuilder builder, Offset<Func2Crefs>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartFunc2crefsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PostProcResult> EndPostProcResult(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PostProcResult>(o);
  }
};

///////////////////////////////////////////////////////
public struct ExportItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ExportItem GetRootAsExportItem(ByteBuffer _bb) { return GetRootAsExportItem(_bb, new ExportItem()); }
  public static ExportItem GetRootAsExportItem(ByteBuffer _bb, ExportItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ExportItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte Format { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public uint ModuleId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public sbyte Blob(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int BlobLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBlobBytes() { return __p.__vector_as_arraysegment(8); }

  public static Offset<ExportItem> CreateExportItem(FlatBufferBuilder builder,
      sbyte format = 0,
      uint module_id = 0,
      VectorOffset blobOffset = default(VectorOffset)) {
    builder.StartObject(3);
    ExportItem.AddBlob(builder, blobOffset);
    ExportItem.AddModuleId(builder, module_id);
    ExportItem.AddFormat(builder, format);
    return ExportItem.EndExportItem(builder);
  }

  public static void StartExportItem(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddFormat(FlatBufferBuilder builder, sbyte format) { builder.AddSbyte(0, format, 0); }
  public static void AddModuleId(FlatBufferBuilder builder, uint moduleId) { builder.AddUint(1, moduleId, 0); }
  public static void AddBlob(FlatBufferBuilder builder, VectorOffset blobOffset) { builder.AddOffset(2, blobOffset.Value, 0); }
  public static VectorOffset CreateBlobVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static void StartBlobVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<ExportItem> EndExportItem(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ExportItem>(o);
  }
};

public struct ExportResult : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ExportResult GetRootAsExportResult(ByteBuffer _bb) { return GetRootAsExportResult(_bb, new ExportResult()); }
  public static ExportResult GetRootAsExportResult(ByteBuffer _bb, ExportResult obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ExportResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ExportItem? Items(int j) { int o = __p.__offset(4); return o != 0 ? (ExportItem?)(new ExportItem()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ItemsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<ExportResult> CreateExportResult(FlatBufferBuilder builder,
      VectorOffset itemsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    ExportResult.AddItems(builder, itemsOffset);
    return ExportResult.EndExportResult(builder);
  }

  public static void StartExportResult(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddItems(FlatBufferBuilder builder, VectorOffset itemsOffset) { builder.AddOffset(0, itemsOffset.Value, 0); }
  public static VectorOffset CreateItemsVector(FlatBufferBuilder builder, Offset<ExportItem>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ExportResult> EndExportResult(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ExportResult>(o);
  }
};


}
